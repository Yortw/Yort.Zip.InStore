### YamlMime:ManagedReference
items:
- uid: Yort.Zip.InStore.RefundOrderRequest
  commentId: T:Yort.Zip.InStore.RefundOrderRequest
  id: RefundOrderRequest
  parent: Yort.Zip.InStore
  children:
  - Yort.Zip.InStore.RefundOrderRequest.Amount
  - Yort.Zip.InStore.RefundOrderRequest.GetCustomHttpHeaders
  - Yort.Zip.InStore.RefundOrderRequest.MerchantRefundReference
  - Yort.Zip.InStore.RefundOrderRequest.Operator
  - Yort.Zip.InStore.RefundOrderRequest.OrderId
  - Yort.Zip.InStore.RefundOrderRequest.StoreId
  - Yort.Zip.InStore.RefundOrderRequest.TerminalId
  - Yort.Zip.InStore.RefundOrderRequest.Validate
  langs:
  - csharp
  - vb
  name: RefundOrderRequest
  nameWithType: RefundOrderRequest
  fullName: Yort.Zip.InStore.RefundOrderRequest
  type: Class
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: RefundOrderRequest
    path: RefundOrderRequest.cs
    startLine: 9
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRepresents a request to refund all or part of a previously completed order.\n"
  example: []
  syntax:
    content: 'public class RefundOrderRequest : ZipRequestOptionsBase'
    content.vb: >-
      Public Class RefundOrderRequest
          Inherits ZipRequestOptionsBase
  inheritance:
  - System.Object
  - Yort.Zip.InStore.ZipRequestOptionsBase
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Yort.Zip.InStore.RefundOrderRequest.MerchantRefundReference
  commentId: P:Yort.Zip.InStore.RefundOrderRequest.MerchantRefundReference
  id: MerchantRefundReference
  parent: Yort.Zip.InStore.RefundOrderRequest
  langs:
  - csharp
  - vb
  name: MerchantRefundReference
  nameWithType: RefundOrderRequest.MerchantRefundReference
  fullName: Yort.Zip.InStore.RefundOrderRequest.MerchantRefundReference
  type: Property
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: MerchantRefundReference
    path: RefundOrderRequest.cs
    startLine: 14
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nA unique reference for this refund. Required.\n"
  example: []
  syntax:
    content: public string MerchantRefundReference { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property MerchantRefundReference As String
  overload: Yort.Zip.InStore.RefundOrderRequest.MerchantRefundReference*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.RefundOrderRequest.OrderId
  commentId: P:Yort.Zip.InStore.RefundOrderRequest.OrderId
  id: OrderId
  parent: Yort.Zip.InStore.RefundOrderRequest
  langs:
  - csharp
  - vb
  name: OrderId
  nameWithType: RefundOrderRequest.OrderId
  fullName: Yort.Zip.InStore.RefundOrderRequest.OrderId
  type: Property
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: OrderId
    path: RefundOrderRequest.cs
    startLine: 18
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nThe unique reference of the order within the Zip system to be refunded against. Required.\n"
  example: []
  syntax:
    content: public string OrderId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property OrderId As String
  overload: Yort.Zip.InStore.RefundOrderRequest.OrderId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.RefundOrderRequest.Amount
  commentId: P:Yort.Zip.InStore.RefundOrderRequest.Amount
  id: Amount
  parent: Yort.Zip.InStore.RefundOrderRequest
  langs:
  - csharp
  - vb
  name: Amount
  nameWithType: RefundOrderRequest.Amount
  fullName: Yort.Zip.InStore.RefundOrderRequest.Amount
  type: Property
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: Amount
    path: RefundOrderRequest.cs
    startLine: 22
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nThe amount of this refund. Required, must be a positive and non-zero value.\n"
  example: []
  syntax:
    content: public decimal Amount { get; set; }
    parameters: []
    return:
      type: System.Decimal
    content.vb: Public Property Amount As Decimal
  overload: Yort.Zip.InStore.RefundOrderRequest.Amount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.RefundOrderRequest.Operator
  commentId: P:Yort.Zip.InStore.RefundOrderRequest.Operator
  id: Operator
  parent: Yort.Zip.InStore.RefundOrderRequest
  langs:
  - csharp
  - vb
  name: Operator
  nameWithType: RefundOrderRequest.Operator
  fullName: Yort.Zip.InStore.RefundOrderRequest.Operator
  type: Property
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: Operator
    path: RefundOrderRequest.cs
    startLine: 26
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nA reference (name or id) of the staff person serving the customer at the POS. Required.\n"
  example: []
  syntax:
    content: public string Operator { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Operator As String
  overload: Yort.Zip.InStore.RefundOrderRequest.Operator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.RefundOrderRequest.TerminalId
  commentId: P:Yort.Zip.InStore.RefundOrderRequest.TerminalId
  id: TerminalId
  parent: Yort.Zip.InStore.RefundOrderRequest
  langs:
  - csharp
  - vb
  name: TerminalId
  nameWithType: RefundOrderRequest.TerminalId
  fullName: Yort.Zip.InStore.RefundOrderRequest.TerminalId
  type: Property
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: TerminalId
    path: RefundOrderRequest.cs
    startLine: 31
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRequired. A value that uniquley identifies the point of sale terminal being used as part of this request. \n"
  example: []
  syntax:
    content: public string TerminalId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property TerminalId As String
  overload: Yort.Zip.InStore.RefundOrderRequest.TerminalId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.RefundOrderRequest.StoreId
  commentId: P:Yort.Zip.InStore.RefundOrderRequest.StoreId
  id: StoreId
  parent: Yort.Zip.InStore.RefundOrderRequest
  langs:
  - csharp
  - vb
  name: StoreId
  nameWithType: RefundOrderRequest.StoreId
  fullName: Yort.Zip.InStore.RefundOrderRequest.StoreId
  type: Property
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: StoreId
    path: RefundOrderRequest.cs
    startLine: 36
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nOptional. When using a merchant level authentication scope this is supposed to give traceability from which store the order originated in.\n"
  example: []
  syntax:
    content: public string StoreId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property StoreId As String
  overload: Yort.Zip.InStore.RefundOrderRequest.StoreId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.RefundOrderRequest.Validate
  commentId: M:Yort.Zip.InStore.RefundOrderRequest.Validate
  id: Validate
  parent: Yort.Zip.InStore.RefundOrderRequest
  langs:
  - csharp
  - vb
  name: Validate()
  nameWithType: RefundOrderRequest.Validate()
  fullName: Yort.Zip.InStore.RefundOrderRequest.Validate()
  type: Method
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: Validate
    path: RefundOrderRequest.cs
    startLine: 43
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nValidates this request as much as possible prior to sending it to the Zip API.\n"
  example: []
  syntax:
    content: public override void Validate()
    content.vb: Public Overrides Sub Validate
  overridden: Yort.Zip.InStore.ZipRequestOptionsBase.Validate
  overload: Yort.Zip.InStore.RefundOrderRequest.Validate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if any required properties are null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any of request properties are invalid.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Yort.Zip.InStore.RefundOrderRequest.GetCustomHttpHeaders
  commentId: M:Yort.Zip.InStore.RefundOrderRequest.GetCustomHttpHeaders
  id: GetCustomHttpHeaders
  parent: Yort.Zip.InStore.RefundOrderRequest
  langs:
  - csharp
  - vb
  name: GetCustomHttpHeaders()
  nameWithType: RefundOrderRequest.GetCustomHttpHeaders()
  fullName: Yort.Zip.InStore.RefundOrderRequest.GetCustomHttpHeaders()
  type: Method
  source:
    remote:
      path: src/RefundOrderRequest.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: GetCustomHttpHeaders
    path: RefundOrderRequest.cs
    startLine: 56
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nReturns custom header values for <xref href=\"Yort.Zip.InStore.RefundOrderRequest.StoreId\" data-throw-if-not-resolved=\"false\"></xref> (if not null or empty) and <xref href=\"Yort.Zip.InStore.RefundOrderRequest.TerminalId\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override Dictionary<string, string> GetCustomHttpHeaders()
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String}
      description: ''
    content.vb: Public Overrides Function GetCustomHttpHeaders As Dictionary(Of String, String)
  overridden: Yort.Zip.InStore.ZipRequestOptionsBase.GetCustomHttpHeaders
  overload: Yort.Zip.InStore.RefundOrderRequest.GetCustomHttpHeaders*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Yort.Zip.InStore
  commentId: N:Yort.Zip.InStore
  name: Yort.Zip.InStore
  nameWithType: Yort.Zip.InStore
  fullName: Yort.Zip.InStore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Yort.Zip.InStore.ZipRequestOptionsBase
  commentId: T:Yort.Zip.InStore.ZipRequestOptionsBase
  parent: Yort.Zip.InStore
  name: ZipRequestOptionsBase
  nameWithType: ZipRequestOptionsBase
  fullName: Yort.Zip.InStore.ZipRequestOptionsBase
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Zip.InStore.RefundOrderRequest.MerchantRefundReference*
  commentId: Overload:Yort.Zip.InStore.RefundOrderRequest.MerchantRefundReference
  name: MerchantRefundReference
  nameWithType: RefundOrderRequest.MerchantRefundReference
  fullName: Yort.Zip.InStore.RefundOrderRequest.MerchantRefundReference
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Yort.Zip.InStore.RefundOrderRequest.OrderId*
  commentId: Overload:Yort.Zip.InStore.RefundOrderRequest.OrderId
  name: OrderId
  nameWithType: RefundOrderRequest.OrderId
  fullName: Yort.Zip.InStore.RefundOrderRequest.OrderId
- uid: Yort.Zip.InStore.RefundOrderRequest.Amount*
  commentId: Overload:Yort.Zip.InStore.RefundOrderRequest.Amount
  name: Amount
  nameWithType: RefundOrderRequest.Amount
  fullName: Yort.Zip.InStore.RefundOrderRequest.Amount
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Yort.Zip.InStore.RefundOrderRequest.Operator*
  commentId: Overload:Yort.Zip.InStore.RefundOrderRequest.Operator
  name: Operator
  nameWithType: RefundOrderRequest.Operator
  fullName: Yort.Zip.InStore.RefundOrderRequest.Operator
- uid: Yort.Zip.InStore.RefundOrderRequest.TerminalId*
  commentId: Overload:Yort.Zip.InStore.RefundOrderRequest.TerminalId
  name: TerminalId
  nameWithType: RefundOrderRequest.TerminalId
  fullName: Yort.Zip.InStore.RefundOrderRequest.TerminalId
- uid: Yort.Zip.InStore.RefundOrderRequest.StoreId*
  commentId: Overload:Yort.Zip.InStore.RefundOrderRequest.StoreId
  name: StoreId
  nameWithType: RefundOrderRequest.StoreId
  fullName: Yort.Zip.InStore.RefundOrderRequest.StoreId
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Yort.Zip.InStore.ZipRequestOptionsBase.Validate
  commentId: M:Yort.Zip.InStore.ZipRequestOptionsBase.Validate
  parent: Yort.Zip.InStore.ZipRequestOptionsBase
  name: Validate()
  nameWithType: ZipRequestOptionsBase.Validate()
  fullName: Yort.Zip.InStore.ZipRequestOptionsBase.Validate()
  spec.csharp:
  - uid: Yort.Zip.InStore.ZipRequestOptionsBase.Validate
    name: Validate
    nameWithType: ZipRequestOptionsBase.Validate
    fullName: Yort.Zip.InStore.ZipRequestOptionsBase.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.ZipRequestOptionsBase.Validate
    name: Validate
    nameWithType: ZipRequestOptionsBase.Validate
    fullName: Yort.Zip.InStore.ZipRequestOptionsBase.Validate
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.RefundOrderRequest.Validate*
  commentId: Overload:Yort.Zip.InStore.RefundOrderRequest.Validate
  name: Validate
  nameWithType: RefundOrderRequest.Validate
  fullName: Yort.Zip.InStore.RefundOrderRequest.Validate
- uid: Yort.Zip.InStore.RefundOrderRequest.StoreId
  commentId: P:Yort.Zip.InStore.RefundOrderRequest.StoreId
  isExternal: true
- uid: Yort.Zip.InStore.RefundOrderRequest.TerminalId
  commentId: P:Yort.Zip.InStore.RefundOrderRequest.TerminalId
  isExternal: true
- uid: Yort.Zip.InStore.ZipRequestOptionsBase.GetCustomHttpHeaders
  commentId: M:Yort.Zip.InStore.ZipRequestOptionsBase.GetCustomHttpHeaders
  parent: Yort.Zip.InStore.ZipRequestOptionsBase
  name: GetCustomHttpHeaders()
  nameWithType: ZipRequestOptionsBase.GetCustomHttpHeaders()
  fullName: Yort.Zip.InStore.ZipRequestOptionsBase.GetCustomHttpHeaders()
  spec.csharp:
  - uid: Yort.Zip.InStore.ZipRequestOptionsBase.GetCustomHttpHeaders
    name: GetCustomHttpHeaders
    nameWithType: ZipRequestOptionsBase.GetCustomHttpHeaders
    fullName: Yort.Zip.InStore.ZipRequestOptionsBase.GetCustomHttpHeaders
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.ZipRequestOptionsBase.GetCustomHttpHeaders
    name: GetCustomHttpHeaders
    nameWithType: ZipRequestOptionsBase.GetCustomHttpHeaders
    fullName: Yort.Zip.InStore.ZipRequestOptionsBase.GetCustomHttpHeaders
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.RefundOrderRequest.GetCustomHttpHeaders*
  commentId: Overload:Yort.Zip.InStore.RefundOrderRequest.GetCustomHttpHeaders
  name: GetCustomHttpHeaders
  nameWithType: RefundOrderRequest.GetCustomHttpHeaders
  fullName: Yort.Zip.InStore.RefundOrderRequest.GetCustomHttpHeaders
- uid: System.Collections.Generic.Dictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String>
  nameWithType: Dictionary<String, String>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String>
  nameWithType.vb: Dictionary(Of String, String)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String)
  name.vb: Dictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
