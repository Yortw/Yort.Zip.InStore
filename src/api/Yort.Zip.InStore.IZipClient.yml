### YamlMime:ManagedReference
items:
- uid: Yort.Zip.InStore.IZipClient
  commentId: T:Yort.Zip.InStore.IZipClient
  id: IZipClient
  parent: Yort.Zip.InStore
  children:
  - Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  - Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  - Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  - Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  - Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  - Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  - Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  langs:
  - csharp
  - vb
  name: IZipClient
  nameWithType: IZipClient
  fullName: Yort.Zip.InStore.IZipClient
  type: Interface
  source:
    remote:
      path: src/IZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: IZipClient
    path: IZipClient.cs
    startLine: 12
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nAn interface for the primary object used to access the Zip payments API.\n"
  remarks: "\n<p>This interface exists primarily to support mocking/stubbing out of the api client for testing purposes. Ideally client code should use this interface as the type for all reference to the implementation instance to support runtime replacement of the implementation.</p>\n"
  example: []
  syntax:
    content: 'public interface IZipClient : IDisposable'
    content.vb: >-
      Public Interface IZipClient
          Inherits IDisposable
  seealso:
  - linkId: Yort.Zip.InStore.ZipClient
    commentId: T:Yort.Zip.InStore.ZipClient
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  id: CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  langs:
  - csharp
  - vb
  name: CreateOrderAsync(CreateOrderRequest)
  nameWithType: IZipClient.CreateOrderAsync(CreateOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  type: Method
  source:
    remote:
      path: src/IZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: CreateOrderAsync
    path: IZipClient.cs
    startLine: 23
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nCreates a new order (payment) with Zip.\n"
  example: []
  syntax:
    content: Task<CreateOrderResponse> CreateOrderAsync(CreateOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.CreateOrderRequest
      description: Details of the order to be created.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.CreateOrderResponse}
      description: Details of the created order if succesful, otherwise throws an exception.
    content.vb: Function CreateOrderAsync(request As CreateOrderRequest) As Task(Of CreateOrderResponse)
  overload: Yort.Zip.InStore.IZipClient.CreateOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
- uid: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  id: GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  parent: Yort.Zip.InStore.IZipClient
  langs:
  - csharp
  - vb
  name: GetOrderStatusAsync(OrderStatusRequest)
  nameWithType: IZipClient.GetOrderStatusAsync(OrderStatusRequest)
  fullName: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  type: Method
  source:
    remote:
      path: src/IZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: GetOrderStatusAsync
    path: IZipClient.cs
    startLine: 34
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRequests the current status of the specified order from the Zip API.\n"
  example: []
  syntax:
    content: Task<OrderStatusResponse> GetOrderStatusAsync(OrderStatusRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.OrderStatusRequest
      description: A <xref href="Yort.Zip.InStore.OrderStatusRequest" data-throw-if-not-resolved="false"></xref> providing details of the order to return the status of.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.OrderStatusResponse}
      description: If successful a <xref href="Yort.Zip.InStore.OrderStatusResponse" data-throw-if-not-resolved="false"></xref> containing details of the specified order&apos;s status. Otherwise throws an exception.
    content.vb: Function GetOrderStatusAsync(request As OrderStatusRequest) As Task(Of OrderStatusResponse)
  overload: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
- uid: Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  id: CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  langs:
  - csharp
  - vb
  name: CancelOrderAsync(CancelOrderRequest)
  nameWithType: IZipClient.CancelOrderAsync(CancelOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  type: Method
  source:
    remote:
      path: src/IZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: CancelOrderAsync
    path: IZipClient.cs
    startLine: 45
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRequests a previously created order be cancelled.\n"
  example: []
  syntax:
    content: Task<CancelOrderResponse> CancelOrderAsync(CancelOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.CancelOrderRequest
      description: A <xref href="Yort.Zip.InStore.CancelOrderRequest" data-throw-if-not-resolved="false"></xref> providing details of the order to be cancelled and operation/terminal that is requesting cancellation.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.CancelOrderResponse}
      description: A <xref href="Yort.Zip.InStore.CancelOrderResponse" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Function CancelOrderAsync(request As CancelOrderRequest) As Task(Of CancelOrderResponse)
  overload: Yort.Zip.InStore.IZipClient.CancelOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
- uid: Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  id: RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  langs:
  - csharp
  - vb
  name: RefundOrderAsync(RefundOrderRequest)
  nameWithType: IZipClient.RefundOrderAsync(RefundOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  type: Method
  source:
    remote:
      path: src/IZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: RefundOrderAsync
    path: IZipClient.cs
    startLine: 56
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRefunds some or all of the money taken as part of a previously completed order.\n"
  example: []
  syntax:
    content: Task<RefundOrderResponse> RefundOrderAsync(RefundOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.RefundOrderRequest
      description: A <xref href="Yort.Zip.InStore.RefundOrderRequest" data-throw-if-not-resolved="false"></xref> specifying details of the refund to create and the order to create it against.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.RefundOrderResponse}
      description: A <xref href="Yort.Zip.InStore.RefundOrderResponse" data-throw-if-not-resolved="false"></xref> with details of a succesful outcome.
    content.vb: Function RefundOrderAsync(request As RefundOrderRequest) As Task(Of RefundOrderResponse)
  overload: Yort.Zip.InStore.IZipClient.RefundOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
- uid: Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  id: CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  langs:
  - csharp
  - vb
  name: CommitOrderAsync(CommitOrderRequest)
  nameWithType: IZipClient.CommitOrderAsync(CommitOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  type: Method
  source:
    remote:
      path: src/IZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: CommitOrderAsync
    path: IZipClient.cs
    startLine: 67
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nCommits (completes) an order previously created via <xref href=\"Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"Yort.Zip.InStore.ZipPaymentFlow.Auth\" data-throw-if-not-resolved=\"false\"></xref> flow.\n"
  example: []
  syntax:
    content: Task CommitOrderAsync(CommitOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.CommitOrderRequest
      description: A <xref href="Yort.Zip.InStore.CommitOrderRequest" data-throw-if-not-resolved="false"></xref> containing details of the order to commit.
    return:
      type: System.Threading.Tasks.Task
      description: A task that can be awaited to know when the operation has completed. If the task does not return an exception, the auth completed succesfully. Use the <xref href="Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)" data-throw-if-not-resolved="false"></xref> to confirm.
    content.vb: Function CommitOrderAsync(request As CommitOrderRequest) As Task
  overload: Yort.Zip.InStore.IZipClient.CommitOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
- uid: Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  id: RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  langs:
  - csharp
  - vb
  name: RollbackOrderAsync(RollbackOrderRequest)
  nameWithType: IZipClient.RollbackOrderAsync(RollbackOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  type: Method
  source:
    remote:
      path: src/IZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: RollbackOrderAsync
    path: IZipClient.cs
    startLine: 78
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRolls back (cancels/undoes) an order previously created via <xref href=\"Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"Yort.Zip.InStore.ZipPaymentFlow.Auth\" data-throw-if-not-resolved=\"false\"></xref> flow.\n"
  example: []
  syntax:
    content: Task RollbackOrderAsync(RollbackOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.RollbackOrderRequest
      description: A <xref href="Yort.Zip.InStore.RollbackOrderRequest" data-throw-if-not-resolved="false"></xref> containing details of the order to rollback.
    return:
      type: System.Threading.Tasks.Task
      description: A task that can be awaited to know when the operation has completed. If the task does not return an exception, the auth rolled back succesfully. Use the <xref href="Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)" data-throw-if-not-resolved="false"></xref> to confirm.
    content.vb: Function RollbackOrderAsync(request As RollbackOrderRequest) As Task
  overload: Yort.Zip.InStore.IZipClient.RollbackOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
- uid: Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  id: EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  parent: Yort.Zip.InStore.IZipClient
  langs:
  - csharp
  - vb
  name: EnrolAsync(EnrolRequest)
  nameWithType: IZipClient.EnrolAsync(EnrolRequest)
  fullName: Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  type: Method
  source:
    remote:
      path: src/IZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: EnrolAsync
    path: IZipClient.cs
    startLine: 92
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nAllows retrieval of the client id and secret used to request new auth tokens using the Zip device enrolment system.\n"
  remarks: "\n<p>NOTE: The &apos;enrollment system&apos; is untested as the test account provided to the library authors did not support generating activation codes. This should work, but if it doesn&apos;t, please log an issue.</p>\n"
  example: []
  syntax:
    content: Task<EnrolResponse> EnrolAsync(EnrolRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.EnrolRequest
      description: A <xref href="Yort.Zip.InStore.EnrolRequest" data-throw-if-not-resolved="false"></xref> instance providing details of the device to enrol.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.EnrolResponse}
      description: A <xref href="Yort.Zip.InStore.EnrolResponse" data-throw-if-not-resolved="false"></xref> instance containing details of the token returned.
    content.vb: Function EnrolAsync(request As EnrolRequest) As Task(Of EnrolResponse)
  overload: Yort.Zip.InStore.IZipClient.EnrolAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
references:
- uid: Yort.Zip.InStore.ZipClient
  commentId: T:Yort.Zip.InStore.ZipClient
  name: ZipClient
  nameWithType: ZipClient
  fullName: Yort.Zip.InStore.ZipClient
- uid: Yort.Zip.InStore
  commentId: N:Yort.Zip.InStore
  name: Yort.Zip.InStore
  nameWithType: Yort.Zip.InStore
  fullName: Yort.Zip.InStore
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Zip.InStore.ZipClientConfiguration
  commentId: T:Yort.Zip.InStore.ZipClientConfiguration
  parent: Yort.Zip.InStore
  name: ZipClientConfiguration
  nameWithType: ZipClientConfiguration
  fullName: Yort.Zip.InStore.ZipClientConfiguration
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Yort.Zip.InStore.ZipApiException
  commentId: T:Yort.Zip.InStore.ZipApiException
  name: ZipApiException
  nameWithType: ZipApiException
  fullName: Yort.Zip.InStore.ZipApiException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  isExternal: true
- uid: Yort.Zip.InStore.IZipClient.CreateOrderAsync*
  commentId: Overload:Yort.Zip.InStore.IZipClient.CreateOrderAsync
  name: CreateOrderAsync
  nameWithType: IZipClient.CreateOrderAsync
  fullName: Yort.Zip.InStore.IZipClient.CreateOrderAsync
- uid: Yort.Zip.InStore.CreateOrderRequest
  commentId: T:Yort.Zip.InStore.CreateOrderRequest
  parent: Yort.Zip.InStore
  name: CreateOrderRequest
  nameWithType: CreateOrderRequest
  fullName: Yort.Zip.InStore.CreateOrderRequest
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.CreateOrderResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.CreateOrderResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CreateOrderResponse>
  nameWithType: Task<CreateOrderResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.CreateOrderResponse>
  nameWithType.vb: Task(Of CreateOrderResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.CreateOrderResponse)
  name.vb: Task(Of CreateOrderResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.CreateOrderResponse
    name: CreateOrderResponse
    nameWithType: CreateOrderResponse
    fullName: Yort.Zip.InStore.CreateOrderResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.CreateOrderResponse
    name: CreateOrderResponse
    nameWithType: CreateOrderResponse
    fullName: Yort.Zip.InStore.CreateOrderResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Yort.Zip.InStore.OrderStatusRequest
  commentId: T:Yort.Zip.InStore.OrderStatusRequest
  parent: Yort.Zip.InStore
  name: OrderStatusRequest
  nameWithType: OrderStatusRequest
  fullName: Yort.Zip.InStore.OrderStatusRequest
- uid: Yort.Zip.InStore.OrderStatusResponse
  commentId: T:Yort.Zip.InStore.OrderStatusResponse
  name: OrderStatusResponse
  nameWithType: OrderStatusResponse
  fullName: Yort.Zip.InStore.OrderStatusResponse
- uid: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync*
  commentId: Overload:Yort.Zip.InStore.IZipClient.GetOrderStatusAsync
  name: GetOrderStatusAsync
  nameWithType: IZipClient.GetOrderStatusAsync
  fullName: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.OrderStatusResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.OrderStatusResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OrderStatusResponse>
  nameWithType: Task<OrderStatusResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.OrderStatusResponse>
  nameWithType.vb: Task(Of OrderStatusResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.OrderStatusResponse)
  name.vb: Task(Of OrderStatusResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.OrderStatusResponse
    name: OrderStatusResponse
    nameWithType: OrderStatusResponse
    fullName: Yort.Zip.InStore.OrderStatusResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.OrderStatusResponse
    name: OrderStatusResponse
    nameWithType: OrderStatusResponse
    fullName: Yort.Zip.InStore.OrderStatusResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.CancelOrderRequest
  commentId: T:Yort.Zip.InStore.CancelOrderRequest
  parent: Yort.Zip.InStore
  name: CancelOrderRequest
  nameWithType: CancelOrderRequest
  fullName: Yort.Zip.InStore.CancelOrderRequest
- uid: Yort.Zip.InStore.CancelOrderResponse
  commentId: T:Yort.Zip.InStore.CancelOrderResponse
  name: CancelOrderResponse
  nameWithType: CancelOrderResponse
  fullName: Yort.Zip.InStore.CancelOrderResponse
- uid: Yort.Zip.InStore.IZipClient.CancelOrderAsync*
  commentId: Overload:Yort.Zip.InStore.IZipClient.CancelOrderAsync
  name: CancelOrderAsync
  nameWithType: IZipClient.CancelOrderAsync
  fullName: Yort.Zip.InStore.IZipClient.CancelOrderAsync
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.CancelOrderResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.CancelOrderResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CancelOrderResponse>
  nameWithType: Task<CancelOrderResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.CancelOrderResponse>
  nameWithType.vb: Task(Of CancelOrderResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.CancelOrderResponse)
  name.vb: Task(Of CancelOrderResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.CancelOrderResponse
    name: CancelOrderResponse
    nameWithType: CancelOrderResponse
    fullName: Yort.Zip.InStore.CancelOrderResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.CancelOrderResponse
    name: CancelOrderResponse
    nameWithType: CancelOrderResponse
    fullName: Yort.Zip.InStore.CancelOrderResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.RefundOrderRequest
  commentId: T:Yort.Zip.InStore.RefundOrderRequest
  parent: Yort.Zip.InStore
  name: RefundOrderRequest
  nameWithType: RefundOrderRequest
  fullName: Yort.Zip.InStore.RefundOrderRequest
- uid: Yort.Zip.InStore.RefundOrderResponse
  commentId: T:Yort.Zip.InStore.RefundOrderResponse
  name: RefundOrderResponse
  nameWithType: RefundOrderResponse
  fullName: Yort.Zip.InStore.RefundOrderResponse
- uid: Yort.Zip.InStore.IZipClient.RefundOrderAsync*
  commentId: Overload:Yort.Zip.InStore.IZipClient.RefundOrderAsync
  name: RefundOrderAsync
  nameWithType: IZipClient.RefundOrderAsync
  fullName: Yort.Zip.InStore.IZipClient.RefundOrderAsync
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.RefundOrderResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.RefundOrderResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RefundOrderResponse>
  nameWithType: Task<RefundOrderResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.RefundOrderResponse>
  nameWithType.vb: Task(Of RefundOrderResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.RefundOrderResponse)
  name.vb: Task(Of RefundOrderResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.RefundOrderResponse
    name: RefundOrderResponse
    nameWithType: RefundOrderResponse
    fullName: Yort.Zip.InStore.RefundOrderResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.RefundOrderResponse
    name: RefundOrderResponse
    nameWithType: RefundOrderResponse
    fullName: Yort.Zip.InStore.RefundOrderResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: CreateOrderAsync(CreateOrderRequest)
  nameWithType: IZipClient.CreateOrderAsync(CreateOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
    name: CreateOrderAsync
    nameWithType: IZipClient.CreateOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.CreateOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.CreateOrderRequest
    name: CreateOrderRequest
    nameWithType: CreateOrderRequest
    fullName: Yort.Zip.InStore.CreateOrderRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
    name: CreateOrderAsync
    nameWithType: IZipClient.CreateOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.CreateOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.CreateOrderRequest
    name: CreateOrderRequest
    nameWithType: CreateOrderRequest
    fullName: Yort.Zip.InStore.CreateOrderRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.ZipPaymentFlow.Auth
  commentId: F:Yort.Zip.InStore.ZipPaymentFlow.Auth
  isExternal: true
- uid: Yort.Zip.InStore.CommitOrderRequest
  commentId: T:Yort.Zip.InStore.CommitOrderRequest
  parent: Yort.Zip.InStore
  name: CommitOrderRequest
  nameWithType: CommitOrderRequest
  fullName: Yort.Zip.InStore.CommitOrderRequest
- uid: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: GetOrderStatusAsync(OrderStatusRequest)
  nameWithType: IZipClient.GetOrderStatusAsync(OrderStatusRequest)
  fullName: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
    name: GetOrderStatusAsync
    nameWithType: IZipClient.GetOrderStatusAsync
    fullName: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.OrderStatusRequest
    name: OrderStatusRequest
    nameWithType: OrderStatusRequest
    fullName: Yort.Zip.InStore.OrderStatusRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
    name: GetOrderStatusAsync
    nameWithType: IZipClient.GetOrderStatusAsync
    fullName: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.OrderStatusRequest
    name: OrderStatusRequest
    nameWithType: OrderStatusRequest
    fullName: Yort.Zip.InStore.OrderStatusRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.IZipClient.CommitOrderAsync*
  commentId: Overload:Yort.Zip.InStore.IZipClient.CommitOrderAsync
  name: CommitOrderAsync
  nameWithType: IZipClient.CommitOrderAsync
  fullName: Yort.Zip.InStore.IZipClient.CommitOrderAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Yort.Zip.InStore.IZipClient
  commentId: T:Yort.Zip.InStore.IZipClient
  parent: Yort.Zip.InStore
  name: IZipClient
  nameWithType: IZipClient
  fullName: Yort.Zip.InStore.IZipClient
- uid: Yort.Zip.InStore.RollbackOrderRequest
  commentId: T:Yort.Zip.InStore.RollbackOrderRequest
  parent: Yort.Zip.InStore
  name: RollbackOrderRequest
  nameWithType: RollbackOrderRequest
  fullName: Yort.Zip.InStore.RollbackOrderRequest
- uid: Yort.Zip.InStore.IZipClient.RollbackOrderAsync*
  commentId: Overload:Yort.Zip.InStore.IZipClient.RollbackOrderAsync
  name: RollbackOrderAsync
  nameWithType: IZipClient.RollbackOrderAsync
  fullName: Yort.Zip.InStore.IZipClient.RollbackOrderAsync
- uid: Yort.Zip.InStore.EnrolRequest
  commentId: T:Yort.Zip.InStore.EnrolRequest
  parent: Yort.Zip.InStore
  name: EnrolRequest
  nameWithType: EnrolRequest
  fullName: Yort.Zip.InStore.EnrolRequest
- uid: Yort.Zip.InStore.EnrolResponse
  commentId: T:Yort.Zip.InStore.EnrolResponse
  name: EnrolResponse
  nameWithType: EnrolResponse
  fullName: Yort.Zip.InStore.EnrolResponse
- uid: Yort.Zip.InStore.IZipClient.EnrolAsync*
  commentId: Overload:Yort.Zip.InStore.IZipClient.EnrolAsync
  name: EnrolAsync
  nameWithType: IZipClient.EnrolAsync
  fullName: Yort.Zip.InStore.IZipClient.EnrolAsync
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.EnrolResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.EnrolResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EnrolResponse>
  nameWithType: Task<EnrolResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.EnrolResponse>
  nameWithType.vb: Task(Of EnrolResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.EnrolResponse)
  name.vb: Task(Of EnrolResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.EnrolResponse
    name: EnrolResponse
    nameWithType: EnrolResponse
    fullName: Yort.Zip.InStore.EnrolResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.EnrolResponse
    name: EnrolResponse
    nameWithType: EnrolResponse
    fullName: Yort.Zip.InStore.EnrolResponse
  - name: )
    nameWithType: )
    fullName: )
