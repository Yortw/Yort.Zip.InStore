### YamlMime:ManagedReference
items:
- uid: Yort.Zip.InStore.ZipClient
  commentId: T:Yort.Zip.InStore.ZipClient
  id: ZipClient
  parent: Yort.Zip.InStore
  children:
  - Yort.Zip.InStore.ZipClient.#ctor(System.Net.Http.HttpClient,Yort.Zip.InStore.ZipClientConfiguration)
  - Yort.Zip.InStore.ZipClient.#ctor(Yort.Zip.InStore.ZipClientConfiguration)
  - Yort.Zip.InStore.ZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  - Yort.Zip.InStore.ZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  - Yort.Zip.InStore.ZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  - Yort.Zip.InStore.ZipClient.Dispose
  - Yort.Zip.InStore.ZipClient.Dispose(System.Boolean)
  - Yort.Zip.InStore.ZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  - Yort.Zip.InStore.ZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  - Yort.Zip.InStore.ZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  - Yort.Zip.InStore.ZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  langs:
  - csharp
  - vb
  name: ZipClient
  nameWithType: ZipClient
  fullName: Yort.Zip.InStore.ZipClient
  type: Class
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: ZipClient
    path: ZipClient.cs
    startLine: 16
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nThe main class used to interact with the Zip payments API.\n"
  example: []
  syntax:
    content: 'public class ZipClient : IZipClient, IDisposable'
    content.vb: >-
      Public Class ZipClient
          Implements IZipClient, IDisposable
  seealso:
  - linkId: Yort.Zip.InStore.IZipClient
    commentId: T:Yort.Zip.InStore.IZipClient
  inheritance:
  - System.Object
  implements:
  - Yort.Zip.InStore.IZipClient
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Yort.Zip.InStore.ZipClient.#ctor(Yort.Zip.InStore.ZipClientConfiguration)
  commentId: M:Yort.Zip.InStore.ZipClient.#ctor(Yort.Zip.InStore.ZipClientConfiguration)
  id: '#ctor(Yort.Zip.InStore.ZipClientConfiguration)'
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: ZipClient(ZipClientConfiguration)
  nameWithType: ZipClient.ZipClient(ZipClientConfiguration)
  fullName: Yort.Zip.InStore.ZipClient.ZipClient(Yort.Zip.InStore.ZipClientConfiguration)
  type: Constructor
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: .ctor
    path: ZipClient.cs
    startLine: 37
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nPartial constructor.\n"
  example: []
  syntax:
    content: public ZipClient(ZipClientConfiguration configuration)
    parameters:
    - id: configuration
      type: Yort.Zip.InStore.ZipClientConfiguration
      description: A <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref> instance providing client credentials, the API environment to access and other required details.
    content.vb: Public Sub New(configuration As ZipClientConfiguration)
  overload: Yort.Zip.InStore.ZipClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.#ctor(System.Net.Http.HttpClient,Yort.Zip.InStore.ZipClientConfiguration)
  commentId: M:Yort.Zip.InStore.ZipClient.#ctor(System.Net.Http.HttpClient,Yort.Zip.InStore.ZipClientConfiguration)
  id: '#ctor(System.Net.Http.HttpClient,Yort.Zip.InStore.ZipClientConfiguration)'
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: ZipClient(HttpClient, ZipClientConfiguration)
  nameWithType: ZipClient.ZipClient(HttpClient, ZipClientConfiguration)
  fullName: Yort.Zip.InStore.ZipClient.ZipClient(System.Net.Http.HttpClient, Yort.Zip.InStore.ZipClientConfiguration)
  type: Constructor
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: .ctor
    path: ZipClient.cs
    startLine: 50
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nFull constructor.\n"
  remarks: "\n<p>If you are injecting an instance of <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref> via the <code data-dev-comment-type=\"paramref\" class=\"paramref\">httpClient</code> make sure the &apos;AllowAutoRedirect&apos; property on the inner most handler (and any intermediate ones) \nis set to false. The Zip API returns redirect responses in some situations that must be handled manually by the <xref href=\"Yort.Zip.InStore.ZipClient\" data-throw-if-not-resolved=\"false\"></xref> instance for correct behaviour to be applied.</p>\n"
  example: []
  syntax:
    content: public ZipClient(HttpClient httpClient, ZipClientConfiguration configuration)
    parameters:
    - id: httpClient
      type: System.Net.Http.HttpClient
      description: See the method remarks for important information. An <xref href="System.Net.Http.HttpClient" data-throw-if-not-resolved="false"></xref> instance to use to access the Zip API, or null to have the ZipClient create it&apos;s own internally. Supply your own if you wish to apply handlers for logging, retry logic etc.
    - id: configuration
      type: Yort.Zip.InStore.ZipClientConfiguration
      description: A <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref> instance providing client credentials, the API environment to access and other required details.
    content.vb: Public Sub New(httpClient As HttpClient, configuration As ZipClientConfiguration)
  overload: Yort.Zip.InStore.ZipClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  id: CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: CreateOrderAsync(CreateOrderRequest)
  nameWithType: ZipClient.CreateOrderAsync(CreateOrderRequest)
  fullName: Yort.Zip.InStore.ZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: CreateOrderAsync
    path: ZipClient.cs
    startLine: 74
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nCreates a new order (payment) with Zip.\n"
  remarks: "\n<p>If the <xref href=\"Yort.Zip.InStore.CreateOrderRequest.EnableUniqueMerchantReferenceCheck\" data-throw-if-not-resolved=\"false\"></xref> is true and the specified <xref href=\"Yort.Zip.InStore.ZipOrder.MerchantReference\" data-throw-if-not-resolved=\"false\"></xref> has \nbeen used before this method will behave in an idempotent way, returning a successful response but without creating a duplicate order. If \n<xref href=\"Yort.Zip.InStore.CreateOrderRequest.EnableUniqueMerchantReferenceCheck\" data-throw-if-not-resolved=\"false\"></xref> is false and duplicate merchant reference is used, a dupliate order will be created in Zip.\n</p>\n"
  example: []
  syntax:
    content: public Task<CreateOrderResponse> CreateOrderAsync(CreateOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.CreateOrderRequest
      description: Details of the order to be created.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.CreateOrderResponse}
      description: Details of the created order if succesful, otherwise throws an exception.
    content.vb: Public Function CreateOrderAsync(request As CreateOrderRequest) As Task(Of CreateOrderResponse)
  overload: Yort.Zip.InStore.ZipClient.CreateOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if a timeout occurs calling the Zip API.
  implements:
  - Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  id: CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: CancelOrderAsync(CancelOrderRequest)
  nameWithType: ZipClient.CancelOrderAsync(CancelOrderRequest)
  fullName: Yort.Zip.InStore.ZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: CancelOrderAsync
    path: ZipClient.cs
    startLine: 132
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRequests a previously created order be cancelled.\n"
  example: []
  syntax:
    content: public Task<CancelOrderResponse> CancelOrderAsync(CancelOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.CancelOrderRequest
      description: A <xref href="Yort.Zip.InStore.CancelOrderRequest" data-throw-if-not-resolved="false"></xref> providing details of the order to be cancelled and operation/terminal that is requesting cancellation.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.CancelOrderResponse}
      description: A <xref href="Yort.Zip.InStore.CancelOrderResponse" data-throw-if-not-resolved="false"></xref> instance.
    content.vb: Public Function CancelOrderAsync(request As CancelOrderRequest) As Task(Of CancelOrderResponse)
  overload: Yort.Zip.InStore.ZipClient.CancelOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if a timeout occurs calling the Zip API.
  implements:
  - Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  id: GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: GetOrderStatusAsync(OrderStatusRequest)
  nameWithType: ZipClient.GetOrderStatusAsync(OrderStatusRequest)
  fullName: Yort.Zip.InStore.ZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: GetOrderStatusAsync
    path: ZipClient.cs
    startLine: 154
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRequests the current status of the specified order from the Zip API.\n"
  example: []
  syntax:
    content: public Task<OrderStatusResponse> GetOrderStatusAsync(OrderStatusRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.OrderStatusRequest
      description: A <xref href="Yort.Zip.InStore.OrderStatusRequest" data-throw-if-not-resolved="false"></xref> providing details of the order to return the status of.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.OrderStatusResponse}
      description: If successful a <xref href="Yort.Zip.InStore.OrderStatusResponse" data-throw-if-not-resolved="false"></xref> containing details of the specified order&apos;s status. Otherwise throws an exception.
    content.vb: Public Function GetOrderStatusAsync(request As OrderStatusRequest) As Task(Of OrderStatusResponse)
  overload: Yort.Zip.InStore.ZipClient.GetOrderStatusAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if a timeout occurs calling the Zip API.
  implements:
  - Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  id: RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: RefundOrderAsync(RefundOrderRequest)
  nameWithType: ZipClient.RefundOrderAsync(RefundOrderRequest)
  fullName: Yort.Zip.InStore.ZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: RefundOrderAsync
    path: ZipClient.cs
    startLine: 176
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRefunds some or all of the money taken as part of a previously completed order.\n"
  example: []
  syntax:
    content: public Task<RefundOrderResponse> RefundOrderAsync(RefundOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.RefundOrderRequest
      description: A <xref href="Yort.Zip.InStore.RefundOrderRequest" data-throw-if-not-resolved="false"></xref> specifying details of the refund to create and the order to create it against.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.RefundOrderResponse}
      description: A <xref href="Yort.Zip.InStore.RefundOrderResponse" data-throw-if-not-resolved="false"></xref> with details of a succesful outcome.
    content.vb: Public Function RefundOrderAsync(request As RefundOrderRequest) As Task(Of RefundOrderResponse)
  overload: Yort.Zip.InStore.ZipClient.RefundOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if a timeout occurs calling the Zip API.
  implements:
  - Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  id: CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: CommitOrderAsync(CommitOrderRequest)
  nameWithType: ZipClient.CommitOrderAsync(CommitOrderRequest)
  fullName: Yort.Zip.InStore.ZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: CommitOrderAsync
    path: ZipClient.cs
    startLine: 205
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nCommits (completes) an order previously created via <xref href=\"Yort.Zip.InStore.ZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"Yort.Zip.InStore.ZipPaymentFlow.Auth\" data-throw-if-not-resolved=\"false\"></xref> flow.\n"
  example: []
  syntax:
    content: public Task CommitOrderAsync(CommitOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.CommitOrderRequest
      description: A <xref href="Yort.Zip.InStore.CommitOrderRequest" data-throw-if-not-resolved="false"></xref> containing details of the order to commit.
    return:
      type: System.Threading.Tasks.Task
      description: A task that can be awaited to know when the operation has completed. If the task does not return an exception, the auth completed succesfully. Use the <xref href="Yort.Zip.InStore.ZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)" data-throw-if-not-resolved="false"></xref> to confirm.
    content.vb: Public Function CommitOrderAsync(request As CommitOrderRequest) As Task
  overload: Yort.Zip.InStore.ZipClient.CommitOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if a timeout occurs calling the Zip API.
  implements:
  - Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  id: RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: RollbackOrderAsync(RollbackOrderRequest)
  nameWithType: ZipClient.RollbackOrderAsync(RollbackOrderRequest)
  fullName: Yort.Zip.InStore.ZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: RollbackOrderAsync
    path: ZipClient.cs
    startLine: 228
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nRolls back (cancels/undoes) an order previously created via <xref href=\"Yort.Zip.InStore.ZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"Yort.Zip.InStore.ZipPaymentFlow.Auth\" data-throw-if-not-resolved=\"false\"></xref> flow.\n"
  example: []
  syntax:
    content: public Task RollbackOrderAsync(RollbackOrderRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.RollbackOrderRequest
      description: A <xref href="Yort.Zip.InStore.RollbackOrderRequest" data-throw-if-not-resolved="false"></xref> containing details of the order to rollback.
    return:
      type: System.Threading.Tasks.Task
      description: A task that can be awaited to know when the operation has completed. If the task does not return an exception, the auth rolled back succesfully. Use the <xref href="Yort.Zip.InStore.ZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)" data-throw-if-not-resolved="false"></xref> to confirm.
    content.vb: Public Function RollbackOrderAsync(request As RollbackOrderRequest) As Task
  overload: Yort.Zip.InStore.ZipClient.RollbackOrderAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if a timeout occurs calling the Zip API.
  implements:
  - Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  id: EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: EnrolAsync(EnrolRequest)
  nameWithType: ZipClient.EnrolAsync(EnrolRequest)
  fullName: Yort.Zip.InStore.ZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: EnrolAsync
    path: ZipClient.cs
    startLine: 256
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nAllows retrieval of the client id and secret used to request new auth tokens using the Zip device enrolment system.\n"
  remarks: "\n<p>On a successful response, not only does the <xref href=\"Yort.Zip.InStore.EnrolResponse\" data-throw-if-not-resolved=\"false\"></xref> returned contain the client id and secret so the caller can persist them \nfor future sessions, but the client id and secret returned will be automatically applied to the configuration for this <xref href=\"Yort.Zip.InStore.ZipClient\" data-throw-if-not-resolved=\"false\"></xref> instance.\n</p>\n"
  example: []
  syntax:
    content: public Task<EnrolResponse> EnrolAsync(EnrolRequest request)
    parameters:
    - id: request
      type: Yort.Zip.InStore.EnrolRequest
      description: A <xref href="Yort.Zip.InStore.EnrolRequest" data-throw-if-not-resolved="false"></xref> instance providing details of the device to enrol.
    return:
      type: System.Threading.Tasks.Task{Yort.Zip.InStore.EnrolResponse}
      description: A <xref href="Yort.Zip.InStore.EnrolResponse" data-throw-if-not-resolved="false"></xref> instance containing details of the token returned.
    content.vb: Public Function EnrolAsync(request As EnrolRequest) As Task(Of EnrolResponse)
  overload: Yort.Zip.InStore.ZipClient.EnrolAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or any required sub-property is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if any sub-property of <code data-dev-comment-type="paramref" class="paramref">request</code> is determined to be invalid.
  - type: Yort.Zip.InStore.ZipApiException
    commentId: T:Yort.Zip.InStore.ZipApiException
    description: Thrown if the Zip API returns an error response.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the <xref href="Yort.Zip.InStore.ZipClientConfiguration" data-throw-if-not-resolved="false"></xref>.
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Thrown if a timeout occurs calling the Zip API.
  implements:
  - Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.Dispose
  commentId: M:Yort.Zip.InStore.ZipClient.Dispose
  id: Dispose
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ZipClient.Dispose()
  fullName: Yort.Zip.InStore.ZipClient.Dispose()
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: Dispose
    path: ZipClient.cs
    startLine: 278
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nDisposes this instance and all internal resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Yort.Zip.InStore.ZipClient.Dispose*
  seealso:
  - linkId: Yort.Zip.InStore.ZipClient.Dispose(System.Boolean)
    commentId: M:Yort.Zip.InStore.ZipClient.Dispose(System.Boolean)
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Yort.Zip.InStore.ZipClient.Dispose(System.Boolean)
  commentId: M:Yort.Zip.InStore.ZipClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Yort.Zip.InStore.ZipClient
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ZipClient.Dispose(Boolean)
  fullName: Yort.Zip.InStore.ZipClient.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/ZipClient.cs
      branch: master
      repo: https://github.com/Yortw/Yort.Zip.InStore
    id: Dispose
    path: ZipClient.cs
    startLine: 297
  assemblies:
  - Yort.Zip.InStore
  namespace: Yort.Zip.InStore
  summary: "\nDisposes resources used by this instance.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: True if dispose is being called explicitly by client code, or false if it is being called from a finalizer (indicating only unmanaged resources should be cleaned up).
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: Yort.Zip.InStore.ZipClient.Dispose*
  seealso:
  - linkId: Yort.Zip.InStore.ZipClient.Dispose
    commentId: M:Yort.Zip.InStore.ZipClient.Dispose
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Yort.Zip.InStore.IZipClient
  commentId: T:Yort.Zip.InStore.IZipClient
  parent: Yort.Zip.InStore
  name: IZipClient
  nameWithType: IZipClient
  fullName: Yort.Zip.InStore.IZipClient
- uid: Yort.Zip.InStore
  commentId: N:Yort.Zip.InStore
  name: Yort.Zip.InStore
  nameWithType: Yort.Zip.InStore
  fullName: Yort.Zip.InStore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Yort.Zip.InStore.ZipClientConfiguration
  commentId: T:Yort.Zip.InStore.ZipClientConfiguration
  parent: Yort.Zip.InStore
  name: ZipClientConfiguration
  nameWithType: ZipClientConfiguration
  fullName: Yort.Zip.InStore.ZipClientConfiguration
- uid: Yort.Zip.InStore.ZipClient.#ctor*
  commentId: Overload:Yort.Zip.InStore.ZipClient.#ctor
  name: ZipClient
  nameWithType: ZipClient.ZipClient
  fullName: Yort.Zip.InStore.ZipClient.ZipClient
- uid: System.Net.Http.HttpClient
  commentId: T:System.Net.Http.HttpClient
  parent: System.Net.Http
  isExternal: true
  name: HttpClient
  nameWithType: HttpClient
  fullName: System.Net.Http.HttpClient
- uid: Yort.Zip.InStore.ZipClient
  commentId: T:Yort.Zip.InStore.ZipClient
  name: ZipClient
  nameWithType: ZipClient
  fullName: Yort.Zip.InStore.ZipClient
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: true
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
- uid: Yort.Zip.InStore.CreateOrderRequest.EnableUniqueMerchantReferenceCheck
  commentId: P:Yort.Zip.InStore.CreateOrderRequest.EnableUniqueMerchantReferenceCheck
  isExternal: true
- uid: Yort.Zip.InStore.ZipOrder.MerchantReference
  commentId: P:Yort.Zip.InStore.ZipOrder.MerchantReference
  isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Yort.Zip.InStore.ZipApiException
  commentId: T:Yort.Zip.InStore.ZipApiException
  name: ZipApiException
  nameWithType: ZipApiException
  fullName: Yort.Zip.InStore.ZipApiException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  isExternal: true
- uid: System.Net.Http.HttpRequestException
  commentId: T:System.Net.Http.HttpRequestException
  isExternal: true
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  isExternal: true
- uid: Yort.Zip.InStore.ZipClient.CreateOrderAsync*
  commentId: Overload:Yort.Zip.InStore.ZipClient.CreateOrderAsync
  name: CreateOrderAsync
  nameWithType: ZipClient.CreateOrderAsync
  fullName: Yort.Zip.InStore.ZipClient.CreateOrderAsync
- uid: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: CreateOrderAsync(CreateOrderRequest)
  nameWithType: IZipClient.CreateOrderAsync(CreateOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
    name: CreateOrderAsync
    nameWithType: IZipClient.CreateOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.CreateOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.CreateOrderRequest
    name: CreateOrderRequest
    nameWithType: CreateOrderRequest
    fullName: Yort.Zip.InStore.CreateOrderRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
    name: CreateOrderAsync
    nameWithType: IZipClient.CreateOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.CreateOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.CreateOrderRequest
    name: CreateOrderRequest
    nameWithType: CreateOrderRequest
    fullName: Yort.Zip.InStore.CreateOrderRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.CreateOrderRequest
  commentId: T:Yort.Zip.InStore.CreateOrderRequest
  parent: Yort.Zip.InStore
  name: CreateOrderRequest
  nameWithType: CreateOrderRequest
  fullName: Yort.Zip.InStore.CreateOrderRequest
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.CreateOrderResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.CreateOrderResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CreateOrderResponse>
  nameWithType: Task<CreateOrderResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.CreateOrderResponse>
  nameWithType.vb: Task(Of CreateOrderResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.CreateOrderResponse)
  name.vb: Task(Of CreateOrderResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.CreateOrderResponse
    name: CreateOrderResponse
    nameWithType: CreateOrderResponse
    fullName: Yort.Zip.InStore.CreateOrderResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.CreateOrderResponse
    name: CreateOrderResponse
    nameWithType: CreateOrderResponse
    fullName: Yort.Zip.InStore.CreateOrderResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Yort.Zip.InStore.CancelOrderRequest
  commentId: T:Yort.Zip.InStore.CancelOrderRequest
  parent: Yort.Zip.InStore
  name: CancelOrderRequest
  nameWithType: CancelOrderRequest
  fullName: Yort.Zip.InStore.CancelOrderRequest
- uid: Yort.Zip.InStore.CancelOrderResponse
  commentId: T:Yort.Zip.InStore.CancelOrderResponse
  name: CancelOrderResponse
  nameWithType: CancelOrderResponse
  fullName: Yort.Zip.InStore.CancelOrderResponse
- uid: Yort.Zip.InStore.ZipClient.CancelOrderAsync*
  commentId: Overload:Yort.Zip.InStore.ZipClient.CancelOrderAsync
  name: CancelOrderAsync
  nameWithType: ZipClient.CancelOrderAsync
  fullName: Yort.Zip.InStore.ZipClient.CancelOrderAsync
- uid: Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: CancelOrderAsync(CancelOrderRequest)
  nameWithType: IZipClient.CancelOrderAsync(CancelOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
    name: CancelOrderAsync
    nameWithType: IZipClient.CancelOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.CancelOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.CancelOrderRequest
    name: CancelOrderRequest
    nameWithType: CancelOrderRequest
    fullName: Yort.Zip.InStore.CancelOrderRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.CancelOrderAsync(Yort.Zip.InStore.CancelOrderRequest)
    name: CancelOrderAsync
    nameWithType: IZipClient.CancelOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.CancelOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.CancelOrderRequest
    name: CancelOrderRequest
    nameWithType: CancelOrderRequest
    fullName: Yort.Zip.InStore.CancelOrderRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.CancelOrderResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.CancelOrderResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CancelOrderResponse>
  nameWithType: Task<CancelOrderResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.CancelOrderResponse>
  nameWithType.vb: Task(Of CancelOrderResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.CancelOrderResponse)
  name.vb: Task(Of CancelOrderResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.CancelOrderResponse
    name: CancelOrderResponse
    nameWithType: CancelOrderResponse
    fullName: Yort.Zip.InStore.CancelOrderResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.CancelOrderResponse
    name: CancelOrderResponse
    nameWithType: CancelOrderResponse
    fullName: Yort.Zip.InStore.CancelOrderResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.OrderStatusRequest
  commentId: T:Yort.Zip.InStore.OrderStatusRequest
  parent: Yort.Zip.InStore
  name: OrderStatusRequest
  nameWithType: OrderStatusRequest
  fullName: Yort.Zip.InStore.OrderStatusRequest
- uid: Yort.Zip.InStore.OrderStatusResponse
  commentId: T:Yort.Zip.InStore.OrderStatusResponse
  name: OrderStatusResponse
  nameWithType: OrderStatusResponse
  fullName: Yort.Zip.InStore.OrderStatusResponse
- uid: Yort.Zip.InStore.ZipClient.GetOrderStatusAsync*
  commentId: Overload:Yort.Zip.InStore.ZipClient.GetOrderStatusAsync
  name: GetOrderStatusAsync
  nameWithType: ZipClient.GetOrderStatusAsync
  fullName: Yort.Zip.InStore.ZipClient.GetOrderStatusAsync
- uid: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: GetOrderStatusAsync(OrderStatusRequest)
  nameWithType: IZipClient.GetOrderStatusAsync(OrderStatusRequest)
  fullName: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
    name: GetOrderStatusAsync
    nameWithType: IZipClient.GetOrderStatusAsync
    fullName: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.OrderStatusRequest
    name: OrderStatusRequest
    nameWithType: OrderStatusRequest
    fullName: Yort.Zip.InStore.OrderStatusRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
    name: GetOrderStatusAsync
    nameWithType: IZipClient.GetOrderStatusAsync
    fullName: Yort.Zip.InStore.IZipClient.GetOrderStatusAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.OrderStatusRequest
    name: OrderStatusRequest
    nameWithType: OrderStatusRequest
    fullName: Yort.Zip.InStore.OrderStatusRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.OrderStatusResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.OrderStatusResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OrderStatusResponse>
  nameWithType: Task<OrderStatusResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.OrderStatusResponse>
  nameWithType.vb: Task(Of OrderStatusResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.OrderStatusResponse)
  name.vb: Task(Of OrderStatusResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.OrderStatusResponse
    name: OrderStatusResponse
    nameWithType: OrderStatusResponse
    fullName: Yort.Zip.InStore.OrderStatusResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.OrderStatusResponse
    name: OrderStatusResponse
    nameWithType: OrderStatusResponse
    fullName: Yort.Zip.InStore.OrderStatusResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.RefundOrderRequest
  commentId: T:Yort.Zip.InStore.RefundOrderRequest
  parent: Yort.Zip.InStore
  name: RefundOrderRequest
  nameWithType: RefundOrderRequest
  fullName: Yort.Zip.InStore.RefundOrderRequest
- uid: Yort.Zip.InStore.RefundOrderResponse
  commentId: T:Yort.Zip.InStore.RefundOrderResponse
  name: RefundOrderResponse
  nameWithType: RefundOrderResponse
  fullName: Yort.Zip.InStore.RefundOrderResponse
- uid: Yort.Zip.InStore.ZipClient.RefundOrderAsync*
  commentId: Overload:Yort.Zip.InStore.ZipClient.RefundOrderAsync
  name: RefundOrderAsync
  nameWithType: ZipClient.RefundOrderAsync
  fullName: Yort.Zip.InStore.ZipClient.RefundOrderAsync
- uid: Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: RefundOrderAsync(RefundOrderRequest)
  nameWithType: IZipClient.RefundOrderAsync(RefundOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
    name: RefundOrderAsync
    nameWithType: IZipClient.RefundOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.RefundOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.RefundOrderRequest
    name: RefundOrderRequest
    nameWithType: RefundOrderRequest
    fullName: Yort.Zip.InStore.RefundOrderRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.RefundOrderAsync(Yort.Zip.InStore.RefundOrderRequest)
    name: RefundOrderAsync
    nameWithType: IZipClient.RefundOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.RefundOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.RefundOrderRequest
    name: RefundOrderRequest
    nameWithType: RefundOrderRequest
    fullName: Yort.Zip.InStore.RefundOrderRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.RefundOrderResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.RefundOrderResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RefundOrderResponse>
  nameWithType: Task<RefundOrderResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.RefundOrderResponse>
  nameWithType.vb: Task(Of RefundOrderResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.RefundOrderResponse)
  name.vb: Task(Of RefundOrderResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.RefundOrderResponse
    name: RefundOrderResponse
    nameWithType: RefundOrderResponse
    fullName: Yort.Zip.InStore.RefundOrderResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.RefundOrderResponse
    name: RefundOrderResponse
    nameWithType: RefundOrderResponse
    fullName: Yort.Zip.InStore.RefundOrderResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.ZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.CreateOrderAsync(Yort.Zip.InStore.CreateOrderRequest)
  isExternal: true
- uid: Yort.Zip.InStore.ZipPaymentFlow.Auth
  commentId: F:Yort.Zip.InStore.ZipPaymentFlow.Auth
  isExternal: true
- uid: Yort.Zip.InStore.CommitOrderRequest
  commentId: T:Yort.Zip.InStore.CommitOrderRequest
  parent: Yort.Zip.InStore
  name: CommitOrderRequest
  nameWithType: CommitOrderRequest
  fullName: Yort.Zip.InStore.CommitOrderRequest
- uid: Yort.Zip.InStore.ZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  commentId: M:Yort.Zip.InStore.ZipClient.GetOrderStatusAsync(Yort.Zip.InStore.OrderStatusRequest)
  isExternal: true
- uid: Yort.Zip.InStore.ZipClient.CommitOrderAsync*
  commentId: Overload:Yort.Zip.InStore.ZipClient.CommitOrderAsync
  name: CommitOrderAsync
  nameWithType: ZipClient.CommitOrderAsync
  fullName: Yort.Zip.InStore.ZipClient.CommitOrderAsync
- uid: Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: CommitOrderAsync(CommitOrderRequest)
  nameWithType: IZipClient.CommitOrderAsync(CommitOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
    name: CommitOrderAsync
    nameWithType: IZipClient.CommitOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.CommitOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.CommitOrderRequest
    name: CommitOrderRequest
    nameWithType: CommitOrderRequest
    fullName: Yort.Zip.InStore.CommitOrderRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.CommitOrderAsync(Yort.Zip.InStore.CommitOrderRequest)
    name: CommitOrderAsync
    nameWithType: IZipClient.CommitOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.CommitOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.CommitOrderRequest
    name: CommitOrderRequest
    nameWithType: CommitOrderRequest
    fullName: Yort.Zip.InStore.CommitOrderRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Yort.Zip.InStore.RollbackOrderRequest
  commentId: T:Yort.Zip.InStore.RollbackOrderRequest
  parent: Yort.Zip.InStore
  name: RollbackOrderRequest
  nameWithType: RollbackOrderRequest
  fullName: Yort.Zip.InStore.RollbackOrderRequest
- uid: Yort.Zip.InStore.ZipClient.RollbackOrderAsync*
  commentId: Overload:Yort.Zip.InStore.ZipClient.RollbackOrderAsync
  name: RollbackOrderAsync
  nameWithType: ZipClient.RollbackOrderAsync
  fullName: Yort.Zip.InStore.ZipClient.RollbackOrderAsync
- uid: Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: RollbackOrderAsync(RollbackOrderRequest)
  nameWithType: IZipClient.RollbackOrderAsync(RollbackOrderRequest)
  fullName: Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
    name: RollbackOrderAsync
    nameWithType: IZipClient.RollbackOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.RollbackOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.RollbackOrderRequest
    name: RollbackOrderRequest
    nameWithType: RollbackOrderRequest
    fullName: Yort.Zip.InStore.RollbackOrderRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.RollbackOrderAsync(Yort.Zip.InStore.RollbackOrderRequest)
    name: RollbackOrderAsync
    nameWithType: IZipClient.RollbackOrderAsync
    fullName: Yort.Zip.InStore.IZipClient.RollbackOrderAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.RollbackOrderRequest
    name: RollbackOrderRequest
    nameWithType: RollbackOrderRequest
    fullName: Yort.Zip.InStore.RollbackOrderRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.EnrolResponse
  commentId: T:Yort.Zip.InStore.EnrolResponse
  name: EnrolResponse
  nameWithType: EnrolResponse
  fullName: Yort.Zip.InStore.EnrolResponse
- uid: Yort.Zip.InStore.EnrolRequest
  commentId: T:Yort.Zip.InStore.EnrolRequest
  parent: Yort.Zip.InStore
  name: EnrolRequest
  nameWithType: EnrolRequest
  fullName: Yort.Zip.InStore.EnrolRequest
- uid: Yort.Zip.InStore.ZipClient.EnrolAsync*
  commentId: Overload:Yort.Zip.InStore.ZipClient.EnrolAsync
  name: EnrolAsync
  nameWithType: ZipClient.EnrolAsync
  fullName: Yort.Zip.InStore.ZipClient.EnrolAsync
- uid: Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  commentId: M:Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  parent: Yort.Zip.InStore.IZipClient
  name: EnrolAsync(EnrolRequest)
  nameWithType: IZipClient.EnrolAsync(EnrolRequest)
  fullName: Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
  spec.csharp:
  - uid: Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
    name: EnrolAsync
    nameWithType: IZipClient.EnrolAsync
    fullName: Yort.Zip.InStore.IZipClient.EnrolAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.EnrolRequest
    name: EnrolRequest
    nameWithType: EnrolRequest
    fullName: Yort.Zip.InStore.EnrolRequest
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.Zip.InStore.IZipClient.EnrolAsync(Yort.Zip.InStore.EnrolRequest)
    name: EnrolAsync
    nameWithType: IZipClient.EnrolAsync
    fullName: Yort.Zip.InStore.IZipClient.EnrolAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.Zip.InStore.EnrolRequest
    name: EnrolRequest
    nameWithType: EnrolRequest
    fullName: Yort.Zip.InStore.EnrolRequest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Yort.Zip.InStore.EnrolResponse}
  commentId: T:System.Threading.Tasks.Task{Yort.Zip.InStore.EnrolResponse}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<EnrolResponse>
  nameWithType: Task<EnrolResponse>
  fullName: System.Threading.Tasks.Task<Yort.Zip.InStore.EnrolResponse>
  nameWithType.vb: Task(Of EnrolResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Yort.Zip.InStore.EnrolResponse)
  name.vb: Task(Of EnrolResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.Zip.InStore.EnrolResponse
    name: EnrolResponse
    nameWithType: EnrolResponse
    fullName: Yort.Zip.InStore.EnrolResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.Zip.InStore.EnrolResponse
    name: EnrolResponse
    nameWithType: EnrolResponse
    fullName: Yort.Zip.InStore.EnrolResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.ZipClient.Dispose(System.Boolean)
  commentId: M:Yort.Zip.InStore.ZipClient.Dispose(System.Boolean)
  isExternal: true
- uid: Yort.Zip.InStore.ZipClient.Dispose*
  commentId: Overload:Yort.Zip.InStore.ZipClient.Dispose
  name: Dispose
  nameWithType: ZipClient.Dispose
  fullName: Yort.Zip.InStore.ZipClient.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.Zip.InStore.ZipClient.Dispose
  commentId: M:Yort.Zip.InStore.ZipClient.Dispose
  isExternal: true
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
