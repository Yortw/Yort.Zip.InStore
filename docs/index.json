{
  "api/Yort.Zip.InStore.ZipOrder.html": {
    "href": "api/Yort.Zip.InStore.ZipOrder.html",
    "title": "Class ZipOrder | Yort.Zip.InStore",
    "keywords": "Class ZipOrder Contains details of an order (request for payment) to be created within the Zip system. Inheritance Object ZipOrder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class ZipOrder Properties | Improve this Doc View Source Amount The amount to be charged to the consumer by Zip. Required. Must be a positive, non-zero value. Declaration public decimal Amount { get; set; } Property Value Type Description Decimal | Improve this Doc View Source CustomerApprovalCode The pre-approval code generated by the csutomer using their Zip app or web login. Required. Declaration public string CustomerApprovalCode { get; set; } Property Value Type Description String | Improve this Doc View Source Items A summary of the items purchased on this order which will be displayed to the end consumer as part of their purchase history. Optional. Declaration public List<ZipOrderItem> Items { get; set; } Property Value Type Description List < ZipOrderItem > Remarks This collection defaults to null, to add items first set it to either an empty collection or a pre-loaded collection of ZipOrderItem instances. | Improve this Doc View Source MerchantReference The unique reference for this order as generated by the merchant. Required. Declaration public string MerchantReference { get; set; } Property Value Type Description String | Improve this Doc View Source Operator A reference (name or id) of the staff person serving the customer at the POS. Required. Declaration public string Operator { get; set; } Property Value Type Description String | Improve this Doc View Source PaymentFlow Determines whether this order results in a payment or an authorisation which must be subsequently confirmed. Required. Declaration public string PaymentFlow { get; set; } Property Value Type Description String Remarks The default is Payment . See Also ZipPaymentFlow See Also CreateOrderResponse CreateOrderAsync ( CreateOrderRequest )"
  },
  "api/Yort.Zip.InStore.ZipEnvironment.NewZealand.html": {
    "href": "api/Yort.Zip.InStore.ZipEnvironment.NewZealand.html",
    "title": "Class ZipEnvironment.NewZealand | Yort.Zip.InStore",
    "keywords": "Class ZipEnvironment.NewZealand Provides pre-build environment instances for the New Zealand region. Inheritance Object ZipEnvironment.NewZealand Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public static class NewZealand Properties | Improve this Doc View Source Production Provides a pre-configured ZipEnvironment instance with correct values for the production environment for NZ merchants. Declaration public static ZipEnvironment Production { get; } Property Value Type Description ZipEnvironment | Improve this Doc View Source Test Provides a pre-configured ZipEnvironment instance with correct values for the test environment for NZ merchants. Declaration public static ZipEnvironment Test { get; } Property Value Type Description ZipEnvironment"
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Yort.Zip.InStore Quick Start | Yort.Zip.InStore",
    "keywords": "Yort.Zip.InStore Quick Start Creating an Order (Taking Payment) Basic Process Create an instance of ZipClient Call ZipClient.CreateOrderAsync If the response from of step 2 has a success status, use ZipClient.GetStatus to poll at one second (or longer) intervals until an accepted, declined or cancelled status is reached. Prior to the order being accepted, declined or cancelled Zip will return a status with a result of Error and a message of Order not found . Handle any transient errors thrown from the polling request. If you decide to timeout/give up polling, call ZipClient.Cancel . Once a final status is reached, you can determine whether payment was approved or not by checking the outcome. You need to record the OrderId of the result somewhere if you want to be able to process refunds in the future. NB This is only a simple/demo implementation. A production quality implementation needs much more robust logic to handle power failure/crash/network outages and other problems. Add the Nuget package Install the Nuget package; PM> Install-Package Yort.Zip.InStore [ ] Full Code Sample A full (demo quality) code sample for creating payment, with minimum comments/noise. See the following sections for a breakdown of what's going on and why. IZipClient client = new ZipClient ( new ZipClientConfiguration(\"YourClientId\", \"YourClientSecret\", ZipEnvironment.NewZealand.Test) ); var request = new CreateOrderRequest() { TerminalId = \"2531\", Order = new ZipOrder() { Amount = 10.5M, CustomerApprovalCode = \"AA05\", MerchantReference = Guid.NewGuid().ToString(), Operator = \"Kermit The Frog\", PaymentFlow = ZipPaymentFlow.Payment, } }; CreateOrderResponse result = await client.CreateOrderAsync(request); var statusRequest = new OrderStatusRequest() { OrderId = result.OrderId }; var done = false; while (!done) { await Task.Delay(1000); status = await client.GetOrderStatusAsync(statusRequest); if (status.Result == ZipOrderStatus.Cancelled) throw new OperationCanceledException(); done = ZipOrderStatus.IsTerminalStatus(statusResponse.Status); } if (statusResponse.Status != ZipOrderStatus.Complete) throw new InvalidOperationException(\"Payment failed: \" + statusResponse.Status); return status.OrderId; Configure and Create A ZipClient Instance The ZipClient is the main class in this library to use for accessing the Zip API functionality. To create an instance first you must create a ZipClientConfiguration object that tells the client how to behave. This sample configures a client for accessing the sandbox/text version of the API. You'll need a client id and secret issued by Zip for the sandbox environment for this to work. Normally you would create the Zip instance on start-up or first use, and then re-use it across requests instead of creating a new one each time. This allows HTTP connection pooling and improves performance. The ZipClient instance is thread-safe in so much as you can run multiple requests through the same instance for different payments from different threads. WARNING: If you are injecting an instance of HttpClient via the httpClient constructor argument, make sure the 'AllowAutoRedirect' property on the inner most handler (and any intermediate ones) is set to false. The Zip API returns redirect responses in some situations that must be handled manually by the ZipClient instance for correct behaviour to be applied. //Zip will issue a client id and secret for each environment, //you need to contact Zip to get these. var config = new ZipClientConfiguration ( \"YourClientId\", \"YourClientSecret\", ZipEnvironment.NewZealand.Test ); //We use IZipClient as the type for the variable holding //the ZipClient instance here as it makes it easier if we //want a test implementation later. IZipClient client = new ZipClient(config); Call Create Order Now we can create an order. Create a CreateOrderRequest with details of the payment to take, and pass it to the ZipClient.CreateOrderAsync method. //We'll set the minimum required properties for this example var request = new CreateOrderRequest() { TerminalId = \"2531\", Order = new ZipOrder() { Amount = 10.5M, CustomerApprovalCode = \"AA05\", MerchantReference = Guid.NewGuid().ToString(), Operator = \"Kermit The Frog\", PaymentFlow = ZipPaymentFlow.Payment, } }; //Note, this method could throw exceptions. Production quality code //would handle them appropriately. CreateOrderResponse result = await client.CreateOrderAsync(request); Poll for Status Now we need to wait for the customer to approve or decline the payment request via the Zip app or website. If they approve the payment then it will be sent by Zip to the payment processor, and if the payment processor accepts then we'll get a completed status. If either the customer or the payment processor declines the response we'll get a cancel/declined or error response. var done = false; // Create a status request. You can create a new one on each loop or // reuse the same one, which is more efficient so that's what we do here. // Unfortunately the Zip status endpoint doesn't use the merchant reference, but // instead the order id returned by the initial create request. If that initial // request is interrupted by a crash, power failure, timeout/network error etc. // you must retry it with duplicate checking enabled until such time as you // receive an order id you can status check against. var statusRequest = new OrderStatusRequest() { OrderId = result.OrderId }; OrderStatusResponse status = null; //Production quality code would also have a timeout, in case the user //is unable to approve or cancel the order in a timely fashion at //the till. There should also be an option for the operator to manually //cancel, in the case where the payment amount has been incorrectly entered //or the consumer is unable to cancel themselves. var done = false; while (!done) { await Task.Delay(1000); // Wait one second between poll requests //Request the current status status = await client.GetOrderStatusAsync(statusRequest); //Detect if we got a final status if (status.Result == ZipOrderStatus.Cancelled) throw new OperationCanceledException(); done = ZipOrderStatus.IsTerminalStatus(statusResponse.Status); } //If the payment reached a final status other than complete, throw an exception to notify the caller. if (statusResponse.Status != ZipOrderStatus.Complete) throw new InvalidOperationException(\"Payment failed: \" + statusResponse.Status); // At this point if the customer approved the payment then status.Result // should be \"Completed\" and the payment plan should be in place. // You need to keep the Zip order id for future use // with refunds. return status.OrderId; Cancelling an Order To cancel a Zip order that is still pending approval (not accepted, declined or cancelled) you will need the OrderId returned in the CreateOrderResponse . Cancellation is successful if the CancelOrderAsync method does not throw an exception. The CancelOrderRequest instance returned will contain the order id of the cancelled order as confirmation. try { var cancelRequest = new CancelOrderRequest() { OrderId = createOrderResult.OrderId, Operator = \"Test\", TerminalId = \"2531\" }; var cancelResponse = await client.CancelOrderAsync(cancelRequest); //Cancellation succeeded } catch (Exception) // Production code should catch specific exception types { //Cancellation failed } Refunding an Order Once an order has been approved you can make one or more refunds against it, up to the total value of the original order. For each refund create a RefundOrderRequest, specify the order id that was returned when the order was created, the refund amount and a unique reference for the refund request. If you get interrupted (power failure, crash, network outage) or suffer a transient error sending a refund, resend the same request again until you get a valid response. Using the same refund details on the retry requests should ensure idempotency and prevent multiple refunds being created if the earlier attempts did actually succeed. var createRefundRequest = new RefundOrderRequest() { MerchantRefundReference = System.Guid.NewGuid().ToString(), OrderId = createOrderResult.OrderId, Amount = 1, Operator = \"Test\", TerminalId = \"2531\" }; try { var refundResponse = await client.RefundOrderAsync(refundRequest); //Refund succeeded, refundResponse.Id will contain the id of the new refund. } catch (Exception) // Production code should catch specific exception types { //Refund failed }"
  },
  "articles/productionrequirements.html": {
    "href": "articles/productionrequirements.html",
    "title": "Production Implementation Requirements | Yort.Zip.InStore",
    "keywords": "Production Implementation Requirements In order to provide a production quality integration with Zip the application developer must undertake a number of steps. Power Failure/Crash Recovery A reliable integration must handle situation where the POS process dies while a Zip order (or refund) is pending, due to a power/hardware failure, OS restart, bug etc. In this case the usual pattern is: * On start-up, or another suitable event, check a persistent store for a list of outstanding requests. For each pending request, recover at least the MerchantReference , and preferably the order id (if it was received and persisted from the initial CreateOrder request). * If you are only able to retrieve the merchant reference, retry the order create request ensuring 'duplicate checking' is enabled. This will allow you to retrieve the Zip order id required in the following steps without risk of double charging the customer. * If a pending order is found, begin polling for the status of that order. If the order is still pending after the first check either continue polling or cancel immediately. When a final state is reached the POS should relate this answer back to the pending POS transaction, provide some way for the user to apply it to a new transaction or perform an automatic refund depending on how the POS is designed. * If a pending refund is found, retry the refund request using the same merchant reference if you want to ensure the refund occurred. Zip refunds requests are idempotent, and sending the same request again will only result in at most one refund being applied. * Before sending a CreateOrderRequest or RefundOrderRequest, generate a unique MerchantReference to be used on that request and save it to persistent storage so it can be used for crash recovery (see above). For a CreateOrderRequest also store the order id returned as soon as possible if the call is successful. * When a POS transaction is completed (or next persisted to permanent storage) with an order or refund that has reached a final status, remove that requests reference from the persistent store of pending requests so it will no longer be rechecked on a restart (see previous steps). Error Handling All methods in the ZipClient class might throw exceptions. Some exceptions such as System.ArgumentException and System.ArgumentNullException occur before the request is sent, if the request data doesn't meet the minimum known requirements for Zip. These should be handled probably presented to the user to tell them what is missing. In addition, any error normally thrown by the .Net HttpClient class including System.TaskCanceledException and HttpRequestException could be re-thrown from these methods. TaskCanceled and timeout exceptions may require special handling. For example if these exceptions are thrown during a CreateOrderRequest call and the POS is not going to try again then another call should be made to CancelOrder to ensure the order is not subsequently accepted by the user. HttpResponseExceptions may indicate a transient error, such as the network being briefly down, or a service unavailable/too many requests response from the server. In this case the POS should wait a short period and then retry the operation. Any error returned by the Zip API (indicating the HTTP call was received by the server but resulted in an error) is converted to a ZipApiException, with an Errors property that contains details of the error response. Polling Timeout It's possible that due to a long network outage or similar problem that a create order request may never reach an approved or declined state and cannot be immediately cancelled. In this case the POS should have a timeout where it gives up polling. This timeout should not be too short, or should prompt the operator to ask if it should give up, as new customers can sometimes take several minutes to complete the sign up process. It is up to the POS to decide how to behave, but the usual logic is: Treat the request as declined Store the request somewhere to be rechecked at a later time when the network is available again. If the customer still wants to make payment they will have to choose another payment method (since the network is not available and Zip cannot be used) On recheck (once the network is available again): If the payment is pending, cancel it. If the payment is approved, refund it. If the payment is cancelled or declined, there is nothing to do except remove it from the list of rechecks Manual Cancellation It is possible the POS operator may need to cancel an in-progress payment, if the end consumer is unable to do so for some reason. It's also possible the customer's device may run out of battery, have no network connection to receive the payment request, or get dropped and damaged etc. In any of these cases where the payment cannot be processed for a known reason the POS user should have the option to manually cancel the request without waiting for a long timeout. This needs to use the CancelOrder method of the ZipClient object to notify Zip of the cancellation, and only treat the payment as cancelled if the cancellation request is successful. Cancelling Orders When making a CancelOrder request an exception might be thrown, and this could be caused by the order having been approved or declined between when you last performed a status check and when the cancellation request was received. If an ZipApiException is thrown as the result of a cancellation request your code should re-check the current status of the order and take action depending on the latest status."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Yort.Zip.InStore Documentation | Yort.Zip.InStore",
    "keywords": "Yort.Zip.InStore Documentation Quick Start Production Implementation Requirements Api Reference Official Zip API documenation"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Yort.Zip.InStore",
    "keywords": "Introduction This library is a thin/light weight OOP wrapper around the Zip API . It provides a clean OOP style interface and saves you having to do generate your own models, make HTTP calls, serialise/deserialise requests and responses and so on. It doesn't add any retry logic, persistent stores or reliability handling. It is still up to the application developer to provide a robust implementation . This library only implements the Zip in-store/POS API and does not implement e-commerce flows."
  },
  "api/Yort.Zip.InStore.ZipOrderStatus.html": {
    "href": "api/Yort.Zip.InStore.ZipOrderStatus.html",
    "title": "Class ZipOrderStatus | Yort.Zip.InStore",
    "keywords": "Class ZipOrderStatus Provides a list of known statuses for Zip orders. Inheritance Object ZipOrderStatus Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public static class ZipOrderStatus Fields | Improve this Doc View Source Approved The order has been approved and paid for by the customer. This status is relevant to an order that has been created with the Auth flow. Declaration public const string Approved = \"approved\" Field Value Type Description String | Improve this Doc View Source Cancelled The order has been cancelled either prior to the customer approving/declining, or the order has been rolled back by the merchant after a succesful Auth . Declaration public const string Cancelled = \"cancelled\" Field Value Type Description String | Improve this Doc View Source Complete The order has been paid and the order is complete. This means either the Payment flow as used and payment successful, or the the Auth was used and the payment was committed. Declaration public const string Complete = \"complete\" Field Value Type Description String | Improve this Doc View Source Declined The order was declined by the user. Declaration public const string Declined = \"declined\" Field Value Type Description String | Improve this Doc View Source Expired The order has timed out. Declaration public const string Expired = \"expired\" Field Value Type Description String | Improve this Doc View Source Pending Indicates the order is still pending approval or cancellation by the system/consumer. The client should continue polling. Declaration public const string Pending = \"pending\" Field Value Type Description String Methods | Improve this Doc View Source IsTerminalStatus(String) Returns true if the status provider is a known, final status - that is a status that should not change again. Declaration public static bool IsTerminalStatus(string status) Parameters Type Name Description String status The status to check. Returns Type Description Boolean True if the status is final, otherwise false."
  },
  "api/Yort.Zip.InStore.EnrolResponse.html": {
    "href": "api/Yort.Zip.InStore.EnrolResponse.html",
    "title": "Class EnrolResponse | Yort.Zip.InStore",
    "keywords": "Class EnrolResponse Contains the result of a successful EnrolRequest . Inheritance Object EnrolResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class EnrolResponse Properties | Improve this Doc View Source ClientId The client id to be used when requesting new authentication tokens from Zip. Declaration [JsonPropertyName(\"client_id\")] public string ClientId { get; set; } Property Value Type Description String Remarks NOTE: The 'enrollment system' is untested as the test account provided to the library authors did not support generating activation codes. This should work, but if it doesn't, please log an issue. | Improve this Doc View Source ClientSecret The client secret to be used when requesting new authentication tokens from Zip. Declaration [JsonPropertyName(\"client_secret\")] public string ClientSecret { get; set; } Property Value Type Description String"
  },
  "api/Yort.Zip.InStore.ZipPaymentFlow.html": {
    "href": "api/Yort.Zip.InStore.ZipPaymentFlow.html",
    "title": "Class ZipPaymentFlow | Yort.Zip.InStore",
    "keywords": "Class ZipPaymentFlow A class that exposes constants for the known allowed values of the PaymentFlow property. Inheritance Object ZipPaymentFlow Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public static class ZipPaymentFlow Fields | Improve this Doc View Source Auth Indicates that an auth should be taken by the initial order creation, and a subsequent call to commit or rollback the payment should be made. Declaration public const string Auth = \"auth\" Field Value Type Description String | Improve this Doc View Source Payment Indicates that payment should be fully completed without the requirement to 'capture' the outcome. Declaration public const string Payment = \"payment\" Field Value Type Description String"
  },
  "api/Yort.Zip.InStore.ZipEnvironment.html": {
    "href": "api/Yort.Zip.InStore.ZipEnvironment.html",
    "title": "Class ZipEnvironment | Yort.Zip.InStore",
    "keywords": "Class ZipEnvironment Represents a particular environment for the Zip API (i.e test for NZ merchants, production for AU merchants etc). Inheritance Object ZipEnvironment Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class ZipEnvironment Remarks You can construct instances of this class in order to support future environments that may come online before the library is updated with support, but for convenience use the pre-built instances provided by the static properties on this class, i.e Test provides the test environment for the NZ region. Constructors | Improve this Doc View Source ZipEnvironment(String, Uri, Uri) Full contructor. Declaration public ZipEnvironment(string audience, Uri tokenEndpoint, Uri baseUrl) Parameters Type Name Description String audience The 'audience' or 'API Identifier' required when requesting an auth token for this environment. Uri tokenEndpoint The full URL used to request an auth token to access the API for this endpoint. Uri baseUrl The root url (including common sub-path) to the API for this environment. Properties | Improve this Doc View Source Audience Returns the 'audience'/'API Identifier' associated with this environment. Declaration public string Audience { get; } Property Value Type Description String | Improve this Doc View Source BaseUrl Returns base url (including common root path) for this environment. Declaration public Uri BaseUrl { get; } Property Value Type Description Uri | Improve this Doc View Source TokenEndpoint Returns the full url used to retrieve an auth token for this environment. Declaration public Uri TokenEndpoint { get; } Property Value Type Description Uri See Also Production Test"
  },
  "api/Yort.Zip.InStore.EnrolRequest.html": {
    "href": "api/Yort.Zip.InStore.EnrolRequest.html",
    "title": "Class EnrolRequest | Yort.Zip.InStore",
    "keywords": "Class EnrolRequest Represents a request to allow a device to request the client id and secret required to request authorisation tokens. Inheritance Object ZipRequestOptionsBase EnrolRequest Inherited Members ZipRequestOptionsBase.GetCustomHttpHeaders() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class EnrolRequest : ZipRequestOptionsBase Properties | Improve this Doc View Source ActivationCode The activation code generated in the Zip merchant portal. Required. Declaration public string ActivationCode { get; set; } Property Value Type Description String | Improve this Doc View Source Secret The secret used when generating the activation code in the Zip merchant portal. Required. Declaration public string Secret { get; set; } Property Value Type Description String | Improve this Doc View Source Terminal The name of the terminal being enroled. Required. Declaration public string Terminal { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ApplyDefaults(ZipClientConfiguration) Applies the default store id, terminal id and operator if appropriate. Declaration public override void ApplyDefaults(ZipClientConfiguration config) Parameters Type Name Description ZipClientConfiguration config A ZipClientConfiguration instance containing the default values to use. Overrides ZipRequestOptionsBase.ApplyDefaults(ZipClientConfiguration) | Improve this Doc View Source Validate() Validates this request as much as possible prior to sending it to the Zip API. Declaration public override void Validate() Overrides ZipRequestOptionsBase.Validate() Exceptions Type Condition ArgumentNullException Thrown if any required properties are null. ArgumentException Thrown if any of request properties are invalid."
  },
  "api/Yort.Zip.InStore.CancelOrderResponse.html": {
    "href": "api/Yort.Zip.InStore.CancelOrderResponse.html",
    "title": "Class CancelOrderResponse | Yort.Zip.InStore",
    "keywords": "Class CancelOrderResponse Contains details of a successful request to cancel an order via CancelOrderAsync(CancelOrderRequest) . Inheritance Object CancelOrderResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class CancelOrderResponse Properties | Improve this Doc View Source OrderId Contains the unique id of the order that was cancelled. Declaration public string OrderId { get; set; } Property Value Type Description String"
  },
  "api/Yort.Zip.InStore.CreateOrderRequest.html": {
    "href": "api/Yort.Zip.InStore.CreateOrderRequest.html",
    "title": "Class CreateOrderRequest | Yort.Zip.InStore",
    "keywords": "Class CreateOrderRequest Contains details of an order (request for payment) to be created within the Zip system. Inheritance Object ZipRequestOptionsBase CreateOrderRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class CreateOrderRequest : ZipRequestOptionsBase Properties | Improve this Doc View Source EnableUniqueMerchantReferenceCheck Determines if Zip is instructed to check if the MerchantReference has already been used and if so behave in an idempotent fashion (return the original response instead of creating a duplicate order). Declaration public bool EnableUniqueMerchantReferenceCheck { get; set; } Property Value Type Description Boolean Remarks The default value is true, which enables the duplicate checking and idempotent responses. Set to false only if you want to allow duplicate orders with the same merchant reference to be created. If this is set to false and a merchant reference is reused, a new order with a new Zip order id will be created. | Improve this Doc View Source Order Specifies the details of the new Zip order to be created. Declaration public ZipOrder Order { get; set; } Property Value Type Description ZipOrder | Improve this Doc View Source StoreId Optional. When using a merchant level authentication scope this is supposed to give traceability from which store the order originated in. Declaration public string StoreId { get; set; } Property Value Type Description String | Improve this Doc View Source TerminalId Required. A value that uniquley identifies the point of sale terminal being used as part of this request. Declaration public string TerminalId { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ApplyDefaults(ZipClientConfiguration) Applies the default store id, terminal id and operator if appropriate. Declaration public override void ApplyDefaults(ZipClientConfiguration config) Parameters Type Name Description ZipClientConfiguration config A ZipClientConfiguration instance containing the default values to use. Overrides ZipRequestOptionsBase.ApplyDefaults(ZipClientConfiguration) | Improve this Doc View Source GetCustomHttpHeaders() Returns custom header values for StoreId (if not null or empty) and TerminalId . Declaration public override Dictionary<string, string> GetCustomHttpHeaders() Returns Type Description Dictionary < String , String > Overrides ZipRequestOptionsBase.GetCustomHttpHeaders() | Improve this Doc View Source Validate() Validates this request as much as possible prior to sending it to the Zip API. Declaration public override void Validate() Overrides ZipRequestOptionsBase.Validate() Exceptions Type Condition ArgumentNullException Thrown if Order or any of it's required sub-properties are null. ArgumentException Thrown if any of the sub-properties of Order are determined to be invalid. See Also CreateOrderRequest CreateOrderAsync ( CreateOrderRequest )"
  },
  "api/Yort.Zip.InStore.CreateOrderResponse.html": {
    "href": "api/Yort.Zip.InStore.CreateOrderResponse.html",
    "title": "Class CreateOrderResponse | Yort.Zip.InStore",
    "keywords": "Class CreateOrderResponse Contains the initial details of an order created in the Zip system. Inheritance Object CreateOrderResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class CreateOrderResponse Properties | Improve this Doc View Source OrderExpiry Gets or sets the expiry time of the order as returned by the Zip API. Declaration public DateTimeOffset? OrderExpiry { get; set; } Property Value Type Description Nullable < DateTimeOffset > Remarks Note this property can be null, and will be in the event of a 'duplicate check' occuring where the response only returns the order id. | Improve this Doc View Source OrderId Gets or sets the unique id of the newly created order (or existing order using the same merchant reference, see EnableUniqueMerchantReferenceCheck ) within the Zip system. Declaration public string OrderId { get; set; } Property Value Type Description String See Also ZipOrder CreateOrderAsync ( CreateOrderRequest )"
  },
  "api/Yort.Zip.InStore.OrderStatusResponse.html": {
    "href": "api/Yort.Zip.InStore.OrderStatusResponse.html",
    "title": "Class OrderStatusResponse | Yort.Zip.InStore",
    "keywords": "Class OrderStatusResponse Represents the response of a successful GetOrderStatusAsync(OrderStatusRequest) call. Inheritance Object OrderStatusResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class OrderStatusResponse Properties | Improve this Doc View Source OrderNumber The human readable form of a Zip order id. Declaration public string OrderNumber { get; set; } Property Value Type Description String | Improve this Doc View Source Status The status of the order. Declaration public string Status { get; set; } Property Value Type Description String"
  },
  "api/Yort.Zip.InStore.RefundOrderRequest.html": {
    "href": "api/Yort.Zip.InStore.RefundOrderRequest.html",
    "title": "Class RefundOrderRequest | Yort.Zip.InStore",
    "keywords": "Class RefundOrderRequest Represents a request to refund all or part of a previously completed order. Inheritance Object ZipRequestOptionsBase RefundOrderRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class RefundOrderRequest : ZipRequestOptionsBase Properties | Improve this Doc View Source Amount The amount of this refund. Required, must be a positive and non-zero value. Declaration public decimal Amount { get; set; } Property Value Type Description Decimal | Improve this Doc View Source MerchantRefundReference A unique reference for this refund. Required. Declaration public string MerchantRefundReference { get; set; } Property Value Type Description String | Improve this Doc View Source Operator A reference (name or id) of the staff person serving the customer at the POS. Required. Declaration public string Operator { get; set; } Property Value Type Description String | Improve this Doc View Source OrderId The unique reference of the order within the Zip system to be refunded against. Required. Declaration public string OrderId { get; set; } Property Value Type Description String | Improve this Doc View Source StoreId Optional. When using a merchant level authentication scope this is supposed to give traceability from which store the order originated in. Declaration public string StoreId { get; set; } Property Value Type Description String | Improve this Doc View Source TerminalId Required. A value that uniquley identifies the point of sale terminal being used as part of this request. Declaration public string TerminalId { get; set; } Property Value Type Description String Methods | Improve this Doc View Source ApplyDefaults(ZipClientConfiguration) Applies the default store id, terminal id and operator if appropriate. Declaration public override void ApplyDefaults(ZipClientConfiguration config) Parameters Type Name Description ZipClientConfiguration config A ZipClientConfiguration instance containing the default values to use. Overrides ZipRequestOptionsBase.ApplyDefaults(ZipClientConfiguration) | Improve this Doc View Source GetCustomHttpHeaders() Returns custom header values for StoreId (if not null or empty) and TerminalId . Declaration public override Dictionary<string, string> GetCustomHttpHeaders() Returns Type Description Dictionary < String , String > Overrides ZipRequestOptionsBase.GetCustomHttpHeaders() | Improve this Doc View Source Validate() Validates this request as much as possible prior to sending it to the Zip API. Declaration public override void Validate() Overrides ZipRequestOptionsBase.Validate() Exceptions Type Condition ArgumentNullException Thrown if any required properties are null. ArgumentException Thrown if any of request properties are invalid."
  },
  "api/Yort.Zip.InStore.OrderStatusRequest.html": {
    "href": "api/Yort.Zip.InStore.OrderStatusRequest.html",
    "title": "Class OrderStatusRequest | Yort.Zip.InStore",
    "keywords": "Class OrderStatusRequest Represents details of a request to retrieve the current status of an order in the Zip system. Inheritance Object ZipRequestOptionsBase OrderStatusRequest Inherited Members ZipRequestOptionsBase.GetCustomHttpHeaders() ZipRequestOptionsBase.ApplyDefaults(ZipClientConfiguration) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class OrderStatusRequest : ZipRequestOptionsBase Properties | Improve this Doc View Source OrderId The unique id of the order within the Zip system, as returned in OrderId . Declaration public string OrderId { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Validate() Validates this request as much as possible prior to sending it to the Zip API. Declaration public override void Validate() Overrides ZipRequestOptionsBase.Validate() Exceptions Type Condition ArgumentNullException Thrown if OrderId is null. ArgumentException Thrown if OrderId is blank or contains only whitespace."
  },
  "api/Yort.Zip.InStore.RefundOrderResponse.html": {
    "href": "api/Yort.Zip.InStore.RefundOrderResponse.html",
    "title": "Class RefundOrderResponse | Yort.Zip.InStore",
    "keywords": "Class RefundOrderResponse Provides details of a successful refund created by RefundOrderAsync(RefundOrderRequest) . Inheritance Object RefundOrderResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class RefundOrderResponse Properties | Improve this Doc View Source Amount The amount refunded. Declaration public decimal Amount { get; set; } Property Value Type Description Decimal | Improve this Doc View Source Id A unique refund id generated by Zip. Declaration public string Id { get; set; } Property Value Type Description String | Improve this Doc View Source MerchantReference The merchant reference for this refund as specified in MerchantRefundReference . Declaration public string MerchantReference { get; set; } Property Value Type Description String | Improve this Doc View Source RefundedDateTime The UTC timestamp when the refund was processed. Declaration public DateTimeOffset? RefundedDateTime { get; set; } Property Value Type Description Nullable < DateTimeOffset >"
  },
  "api/Yort.Zip.InStore.CommitOrderRequest.html": {
    "href": "api/Yort.Zip.InStore.CommitOrderRequest.html",
    "title": "Class CommitOrderRequest | Yort.Zip.InStore",
    "keywords": "Class CommitOrderRequest Contains details of a request to commit an order that has been created using the Auth flow. Inheritance Object ZipRequestOptionsBase CommitOrderRequest Inherited Members ZipRequestOptionsBase.GetCustomHttpHeaders() ZipRequestOptionsBase.ApplyDefaults(ZipClientConfiguration) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class CommitOrderRequest : ZipRequestOptionsBase Properties | Improve this Doc View Source OrderId The unique id of the order within the Zip system, as returned in OrderId . Declaration public string OrderId { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Validate() Validates this request as much as possible prior to sending it to the Zip API. Declaration public override void Validate() Overrides ZipRequestOptionsBase.Validate() Exceptions Type Condition ArgumentNullException Thrown if any required properties are null. ArgumentException Thrown if any of request properties are invalid."
  },
  "api/Yort.Zip.InStore.ZipClient.html": {
    "href": "api/Yort.Zip.InStore.ZipClient.html",
    "title": "Class ZipClient | Yort.Zip.InStore",
    "keywords": "Class ZipClient The main class used to interact with the Zip payments API. Inheritance Object ZipClient Implements IZipClient IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class ZipClient : IZipClient, IDisposable Constructors | Improve this Doc View Source ZipClient(HttpClient, ZipClientConfiguration) Full constructor. Declaration public ZipClient(HttpClient httpClient, ZipClientConfiguration configuration) Parameters Type Name Description HttpClient httpClient See the method remarks for important information. An HttpClient instance to use to access the Zip API, or null to have the ZipClient create it's own internally. Supply your own if you wish to apply handlers for logging, retry logic etc. ZipClientConfiguration configuration A ZipClientConfiguration instance providing client credentials, the API environment to access and other required details. Remarks If you are injecting an instance of HttpClient via the httpClient make sure the 'AllowAutoRedirect' property on the inner most handler (and any intermediate ones) is set to false. The Zip API returns redirect responses in some situations that must be handled manually by the ZipClient instance for correct behaviour to be applied. | Improve this Doc View Source ZipClient(ZipClientConfiguration) Partial constructor. Declaration public ZipClient(ZipClientConfiguration configuration) Parameters Type Name Description ZipClientConfiguration configuration A ZipClientConfiguration instance providing client credentials, the API environment to access and other required details. Methods | Improve this Doc View Source CancelOrderAsync(CancelOrderRequest) Requests a previously created order be cancelled. Declaration public Task<CancelOrderResponse> CancelOrderAsync(CancelOrderRequest request) Parameters Type Name Description CancelOrderRequest request A CancelOrderRequest providing details of the order to be cancelled and operation/terminal that is requesting cancellation. Returns Type Description Task < CancelOrderResponse > A CancelOrderResponse instance. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source CommitOrderAsync(CommitOrderRequest) Commits (completes) an order previously created via CreateOrderAsync(CreateOrderRequest) using the Auth flow. Declaration public Task CommitOrderAsync(CommitOrderRequest request) Parameters Type Name Description CommitOrderRequest request A CommitOrderRequest containing details of the order to commit. Returns Type Description Task A task that can be awaited to know when the operation has completed. If the task does not return an exception, the auth completed succesfully. Use the GetOrderStatusAsync(OrderStatusRequest) to confirm. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source CreateOrderAsync(CreateOrderRequest) Creates a new order (payment) with Zip. Declaration public Task<CreateOrderResponse> CreateOrderAsync(CreateOrderRequest request) Parameters Type Name Description CreateOrderRequest request Details of the order to be created. Returns Type Description Task < CreateOrderResponse > Details of the created order if succesful, otherwise throws an exception. Remarks If the EnableUniqueMerchantReferenceCheck is true and the specified MerchantReference has been used before this method will behave in an idempotent way, returning a successful response but without creating a duplicate order. If EnableUniqueMerchantReferenceCheck is false and duplicate merchant reference is used, a dupliate order will be created in Zip. Exceptions Type Condition ArgumentNullException Thrown if request is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source Dispose() Disposes this instance and all internal resources. Declaration public void Dispose() See Also Dispose(Boolean) | Improve this Doc View Source Dispose(Boolean) Disposes resources used by this instance. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing True if dispose is being called explicitly by client code, or false if it is being called from a finalizer (indicating only unmanaged resources should be cleaned up). See Also Dispose() | Improve this Doc View Source EnrolAsync(EnrolRequest) Allows retrieval of the client id and secret used to request new auth tokens using the Zip device enrolment system. Declaration public Task<EnrolResponse> EnrolAsync(EnrolRequest request) Parameters Type Name Description EnrolRequest request A EnrolRequest instance providing details of the device to enrol. Returns Type Description Task < EnrolResponse > A EnrolResponse instance containing details of the token returned. Remarks On a successful response, not only does the EnrolResponse returned contain the client id and secret so the caller can persist them for future sessions, but the client id and secret returned will be automatically applied to the configuration for this ZipClient instance. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source GetOrderStatusAsync(OrderStatusRequest) Requests the current status of the specified order from the Zip API. Declaration public Task<OrderStatusResponse> GetOrderStatusAsync(OrderStatusRequest request) Parameters Type Name Description OrderStatusRequest request A OrderStatusRequest providing details of the order to return the status of. Returns Type Description Task < OrderStatusResponse > If successful a OrderStatusResponse containing details of the specified order's status. Otherwise throws an exception. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source RefundOrderAsync(RefundOrderRequest) Refunds some or all of the money taken as part of a previously completed order. Declaration public Task<RefundOrderResponse> RefundOrderAsync(RefundOrderRequest request) Parameters Type Name Description RefundOrderRequest request A RefundOrderRequest specifying details of the refund to create and the order to create it against. Returns Type Description Task < RefundOrderResponse > A RefundOrderResponse with details of a succesful outcome. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source RollbackOrderAsync(RollbackOrderRequest) Rolls back (cancels/undoes) an order previously created via CreateOrderAsync(CreateOrderRequest) using the Auth flow. Declaration public Task RollbackOrderAsync(RollbackOrderRequest request) Parameters Type Name Description RollbackOrderRequest request A RollbackOrderRequest containing details of the order to rollback. Returns Type Description Task A task that can be awaited to know when the operation has completed. If the task does not return an exception, the auth rolled back succesfully. Use the GetOrderStatusAsync(OrderStatusRequest) to confirm. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. Implements IZipClient System.IDisposable See Also IZipClient"
  },
  "api/Yort.Zip.InStore.CancelOrderRequest.html": {
    "href": "api/Yort.Zip.InStore.CancelOrderRequest.html",
    "title": "Class CancelOrderRequest | Yort.Zip.InStore",
    "keywords": "Class CancelOrderRequest Represents a request to cancel an order that has not yet been approved by the consumer or reached a final status. Inheritance Object ZipRequestOptionsBase CancelOrderRequest Inherited Members ZipRequestOptionsBase.GetCustomHttpHeaders() ZipRequestOptionsBase.ApplyDefaults(ZipClientConfiguration) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class CancelOrderRequest : ZipRequestOptionsBase Properties | Improve this Doc View Source Operator A reference (name or id) of the staff person serving the customer at the POS. Required. Declaration public string Operator { get; set; } Property Value Type Description String | Improve this Doc View Source OrderId The unique id of the order within the Zip system, as returned in OrderId . Declaration public string OrderId { get; set; } Property Value Type Description String | Improve this Doc View Source TerminalId Required. A value that uniquley identifies the point of sale terminal being used as part of this request. Declaration public string TerminalId { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Validate() Validates this request as much as possible prior to sending it to the Zip API. Declaration public override void Validate() Overrides ZipRequestOptionsBase.Validate() Exceptions Type Condition ArgumentNullException Thrown if any required properties are null. ArgumentException Thrown if any of request properties are invalid."
  },
  "api/Yort.Zip.InStore.ZipClientConfiguration.html": {
    "href": "api/Yort.Zip.InStore.ZipClientConfiguration.html",
    "title": "Class ZipClientConfiguration | Yort.Zip.InStore",
    "keywords": "Class ZipClientConfiguration Provides details to a ZipClient instance about how to access the Zip API. Inheritance Object ZipClientConfiguration Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class ZipClientConfiguration Constructors | Improve this Doc View Source ZipClientConfiguration(String, String, ZipEnvironment) Full constructor. Declaration public ZipClientConfiguration(string clientId, string clientSecret, ZipEnvironment environment) Parameters Type Name Description String clientId The client id used to request new authentication tokens. Can be null if you plan to retrieve it using the EnrolAsync(EnrolRequest) mechanism. String clientSecret The client secret used to request new authentication tokens. Can be null if you plan to retrieve it using the EnrolAsync(EnrolRequest) mechanism. ZipEnvironment environment The environment indicating the API instance to access. Required. Properties | Improve this Doc View Source ClientId Returns the client id value provided via the constructor. Declaration public string ClientId { get; } Property Value Type Description String | Improve this Doc View Source ClientSecret Returns the client secret value provided via the constructor. Declaration public string ClientSecret { get; } Property Value Type Description String | Improve this Doc View Source DefaultOperator Provides the default (POS) operator value to be sent on requests (that require an operator value) if the request value is not already set (null). Declaration public string DefaultOperator { get; set; } Property Value Type Description String | Improve this Doc View Source DefaultStoreId Provides the default store id to be sent on requests (that require a store id) if the request value is not already set (null). Declaration public string DefaultStoreId { get; set; } Property Value Type Description String | Improve this Doc View Source DefaultTerminalId Provides the default terminal id to be sent on requests (that require a terminal id) if the request value is not already set (null). Declaration public string DefaultTerminalId { get; set; } Property Value Type Description String | Improve this Doc View Source Environment Returns the ZipEnvironment value provided via the constructor. Declaration public ZipEnvironment Environment { get; } Property Value Type Description ZipEnvironment"
  },
  "api/Yort.Zip.InStore.ZipRequestOptionsBase.html": {
    "href": "api/Yort.Zip.InStore.ZipRequestOptionsBase.html",
    "title": "Class ZipRequestOptionsBase | Yort.Zip.InStore",
    "keywords": "Class ZipRequestOptionsBase Base class for request options classes, providing a common and extensible interface for all requests. Inheritance Object ZipRequestOptionsBase CancelOrderRequest CommitOrderRequest CreateOrderRequest EnrolRequest OrderStatusRequest RefundOrderRequest RollbackOrderRequest Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public abstract class ZipRequestOptionsBase Methods | Improve this Doc View Source ApplyDefaults(ZipClientConfiguration) Applies default values from the ZipClientConfiguration specified to this request, where appropriate. Declaration public virtual void ApplyDefaults(ZipClientConfiguration config) Parameters Type Name Description ZipClientConfiguration config A ZipClientConfiguration to read default values from. Remarks Defaults should only be used for values that are not otherwise set (null). The base version of this method is a no-op, it must be overridden by derived classes to implement the defaults specific to their request format. This method is called (by ZipClient ) before the Validate() method, and should be robust to null/missing/out of range values. | Improve this Doc View Source GetCustomHttpHeaders() Returns a list of key value pairs to be applied as HTTP headers to HTTP request for this request type. Declaration public virtual Dictionary<string, string> GetCustomHttpHeaders() Returns Type Description Dictionary < String , String > A dictionary containing key/value pairs to be applied as custom HTTP headers, or null if no custom headers apply. Remarks By default returns null indicating there are no custom headers. Can be overridden by derived types to specify otherwise. | Improve this Doc View Source Validate() Validates the properties of this request match the known design time requirements, i.e are all required properties provided. Declaration public abstract void Validate() Remarks Throws exceptions (typically ArgumentException , ArgumentNullException or ArgumentOutOfRangeException ) if any property is in a known invalid state."
  },
  "api/Yort.Zip.InStore.RollbackOrderRequest.html": {
    "href": "api/Yort.Zip.InStore.RollbackOrderRequest.html",
    "title": "Class RollbackOrderRequest | Yort.Zip.InStore",
    "keywords": "Class RollbackOrderRequest Contains details of a request to rollback (undo/cancel) an order that has been created using the Auth flow. Inheritance Object ZipRequestOptionsBase RollbackOrderRequest Inherited Members ZipRequestOptionsBase.GetCustomHttpHeaders() ZipRequestOptionsBase.ApplyDefaults(ZipClientConfiguration) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class RollbackOrderRequest : ZipRequestOptionsBase Properties | Improve this Doc View Source OrderId The unique id of the order within the Zip system, as returned in OrderId . Declaration public string OrderId { get; set; } Property Value Type Description String Methods | Improve this Doc View Source Validate() Validates this request as much as possible prior to sending it to the Zip API. Declaration public override void Validate() Overrides ZipRequestOptionsBase.Validate() Exceptions Type Condition ArgumentNullException Thrown if any required properties are null. ArgumentException Thrown if any of request properties are invalid."
  },
  "api/Yort.Zip.InStore.ZipValidationError.html": {
    "href": "api/Yort.Zip.InStore.ZipValidationError.html",
    "title": "Class ZipValidationError | Yort.Zip.InStore",
    "keywords": "Class ZipValidationError Represents a set of errors that relate to a specific request property. Inheritance Object ZipValidationError Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax [Serializable] public class ZipValidationError Properties | Improve this Doc View Source ErrorMessages A set of error messages stating problems with the property specified. Declaration public IEnumerable<string> ErrorMessages { get; set; } Property Value Type Description IEnumerable < String > | Improve this Doc View Source PropertyName The name of the property these errors relate to. Declaration public string PropertyName { get; set; } Property Value Type Description String"
  },
  "api/Yort.Zip.InStore.ZipOrderItem.html": {
    "href": "api/Yort.Zip.InStore.ZipOrderItem.html",
    "title": "Class ZipOrderItem | Yort.Zip.InStore",
    "keywords": "Class ZipOrderItem Represents information about an item purchased on a Zip order, used to show the end-consumer details of their purchase in the Zip consumer portal. Inheritance Object ZipOrderItem Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public class ZipOrderItem Properties | Improve this Doc View Source Description A description of the item. Declaration public string Description { get; set; } Property Value Type Description String | Improve this Doc View Source Name A short name of the item. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Price The price the item was purchased at. Declaration public decimal Price { get; set; } Property Value Type Description Decimal | Improve this Doc View Source Quantity The quantity of this item purchased. Declaration public int Quantity { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Sku The unique sku code of the item. Declaration public string Sku { get; set; } Property Value Type Description String"
  },
  "api/Yort.Zip.InStore.IZipClient.html": {
    "href": "api/Yort.Zip.InStore.IZipClient.html",
    "title": "Interface IZipClient | Yort.Zip.InStore",
    "keywords": "Interface IZipClient An interface for the primary object used to access the Zip payments API. Inherited Members IDisposable.Dispose() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax public interface IZipClient : IDisposable Remarks This interface exists primarily to support mocking/stubbing out of the api client for testing purposes. Ideally client code should use this interface as the type for all reference to the implementation instance to support runtime replacement of the implementation. Methods | Improve this Doc View Source CancelOrderAsync(CancelOrderRequest) Requests a previously created order be cancelled. Declaration Task<CancelOrderResponse> CancelOrderAsync(CancelOrderRequest request) Parameters Type Name Description CancelOrderRequest request A CancelOrderRequest providing details of the order to be cancelled and operation/terminal that is requesting cancellation. Returns Type Description Task < CancelOrderResponse > A CancelOrderResponse instance. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source CommitOrderAsync(CommitOrderRequest) Commits (completes) an order previously created via CreateOrderAsync(CreateOrderRequest) using the Auth flow. Declaration Task CommitOrderAsync(CommitOrderRequest request) Parameters Type Name Description CommitOrderRequest request A CommitOrderRequest containing details of the order to commit. Returns Type Description Task A task that can be awaited to know when the operation has completed. If the task does not return an exception, the auth completed succesfully. Use the GetOrderStatusAsync(OrderStatusRequest) to confirm. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source CreateOrderAsync(CreateOrderRequest) Creates a new order (payment) with Zip. Declaration Task<CreateOrderResponse> CreateOrderAsync(CreateOrderRequest request) Parameters Type Name Description CreateOrderRequest request Details of the order to be created. Returns Type Description Task < CreateOrderResponse > Details of the created order if succesful, otherwise throws an exception. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source EnrolAsync(EnrolRequest) Allows retrieval of the client id and secret used to request new auth tokens using the Zip device enrolment system. Declaration Task<EnrolResponse> EnrolAsync(EnrolRequest request) Parameters Type Name Description EnrolRequest request A EnrolRequest instance providing details of the device to enrol. Returns Type Description Task < EnrolResponse > A EnrolResponse instance containing details of the token returned. Remarks On a successful response, not only does the EnrolResponse returned contain the client id and secret so the caller can persist them for future sessions, but the client id and secret returned will be automatically applied to the configuration for this ZipClient instance. NOTE: The 'enrollment system' is untested as the test account provided to the library authors did not support generating activation codes. This should work, but if it doesn't, please log an issue. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source GetOrderStatusAsync(OrderStatusRequest) Requests the current status of the specified order from the Zip API. Declaration Task<OrderStatusResponse> GetOrderStatusAsync(OrderStatusRequest request) Parameters Type Name Description OrderStatusRequest request A OrderStatusRequest providing details of the order to return the status of. Returns Type Description Task < OrderStatusResponse > If successful a OrderStatusResponse containing details of the specified order's status. Otherwise throws an exception. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source RefundOrderAsync(RefundOrderRequest) Refunds some or all of the money taken as part of a previously completed order. Declaration Task<RefundOrderResponse> RefundOrderAsync(RefundOrderRequest request) Parameters Type Name Description RefundOrderRequest request A RefundOrderRequest specifying details of the refund to create and the order to create it against. Returns Type Description Task < RefundOrderResponse > A RefundOrderResponse with details of a succesful outcome. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. | Improve this Doc View Source RollbackOrderAsync(RollbackOrderRequest) Rolls back (cancels/undoes) an order previously created via CreateOrderAsync(CreateOrderRequest) using the Auth flow. Declaration Task RollbackOrderAsync(RollbackOrderRequest request) Parameters Type Name Description RollbackOrderRequest request A RollbackOrderRequest containing details of the order to rollback. Returns Type Description Task A task that can be awaited to know when the operation has completed. If the task does not return an exception, the auth rolled back succesfully. Use the GetOrderStatusAsync(OrderStatusRequest) to confirm. Exceptions Type Condition ArgumentNullException Thrown if request or any required sub-property is null. ArgumentException Thrown if any sub-property of request is determined to be invalid. ZipApiException Thrown if the Zip API returns an error response. UnauthorizedAccessException Thrown if the request to Zip is unauthorised, or if insufficient/incorrect client authentication details have been provided via the ZipClientConfiguration . HttpRequestException Thrown for some types of network and HTTP failures, usually where the request has not made it to the server for processing. OperationCanceledException Thrown if a timeout occurs calling the Zip API. See Also ZipClient"
  },
  "api/Yort.Zip.InStore.ZipApiException.html": {
    "href": "api/Yort.Zip.InStore.ZipApiException.html",
    "title": "Class ZipApiException | Yort.Zip.InStore",
    "keywords": "Class ZipApiException An exception thrown by ZipClient when an error response is received from the Zip API. Inheritance Object Exception ZipApiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax [Serializable] public class ZipApiException : Exception, ISerializable Constructors | Improve this Doc View Source ZipApiException() Default constructor. Not recommended for use. Declaration public ZipApiException() | Improve this Doc View Source ZipApiException(SerializationInfo, StreamingContext) Deserialisation constructor. Declaration protected ZipApiException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The serialisation information to deserialise from. StreamingContext context The streaming context to deserialise from. | Improve this Doc View Source ZipApiException(String) Partial constructor. Not recommended for use. Declaration public ZipApiException(string message) Parameters Type Name Description String message The error message of the exception. | Improve this Doc View Source ZipApiException(String, Exception) Partial constructor. Not recommended for use. Declaration public ZipApiException(string message, Exception inner) Parameters Type Name Description String message The error message for this exception. Exception inner Another exception being wrapped by this one. | Improve this Doc View Source ZipApiException(ZipErrorResponse) Partial constructor, recommended. Declaration public ZipApiException(ZipErrorResponse error) Parameters Type Name Description ZipErrorResponse error A ZipErrorResponse containing full errors received from the Zip API. | Improve this Doc View Source ZipApiException(ZipErrorResponse, Exception) Full constructor, recommended. Declaration public ZipApiException(ZipErrorResponse error, Exception inner) Parameters Type Name Description ZipErrorResponse error A ZipErrorResponse containing full errors received from the Zip API. Exception inner Another exception being wrapped by this one. Properties | Improve this Doc View Source Errors Returns a ZipErrorResponse instance containing details of the full set of errors, or null if no response content was provided by the Zip API. Declaration public ZipErrorResponse Errors { get; } Property Value Type Description ZipErrorResponse Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Yort.Zip.InStore.html": {
    "href": "api/Yort.Zip.InStore.html",
    "title": "Namespace Yort.Zip.InStore | Yort.Zip.InStore",
    "keywords": "Namespace Yort.Zip.InStore Classes CancelOrderRequest Represents a request to cancel an order that has not yet been approved by the consumer or reached a final status. CancelOrderResponse Contains details of a successful request to cancel an order via CancelOrderAsync(CancelOrderRequest) . CommitOrderRequest Contains details of a request to commit an order that has been created using the Auth flow. CreateOrderRequest Contains details of an order (request for payment) to be created within the Zip system. CreateOrderResponse Contains the initial details of an order created in the Zip system. EnrolRequest Represents a request to allow a device to request the client id and secret required to request authorisation tokens. EnrolResponse Contains the result of a successful EnrolRequest . OrderStatusRequest Represents details of a request to retrieve the current status of an order in the Zip system. OrderStatusResponse Represents the response of a successful GetOrderStatusAsync(OrderStatusRequest) call. RefundOrderRequest Represents a request to refund all or part of a previously completed order. RefundOrderResponse Provides details of a successful refund created by RefundOrderAsync(RefundOrderRequest) . RollbackOrderRequest Contains details of a request to rollback (undo/cancel) an order that has been created using the Auth flow. ZipApiException An exception thrown by ZipClient when an error response is received from the Zip API. ZipClient The main class used to interact with the Zip payments API. ZipClientConfiguration Provides details to a ZipClient instance about how to access the Zip API. ZipEnvironment Represents a particular environment for the Zip API (i.e test for NZ merchants, production for AU merchants etc). ZipEnvironment.NewZealand Provides pre-build environment instances for the New Zealand region. ZipErrorResponse Used to hold error messages and validation errors returned by the Zip API. ZipOrder Contains details of an order (request for payment) to be created within the Zip system. ZipOrderItem Represents information about an item purchased on a Zip order, used to show the end-consumer details of their purchase in the Zip consumer portal. ZipOrderStatus Provides a list of known statuses for Zip orders. ZipPaymentFlow A class that exposes constants for the known allowed values of the PaymentFlow property. ZipRequestOptionsBase Base class for request options classes, providing a common and extensible interface for all requests. ZipValidationError Represents a set of errors that relate to a specific request property. Interfaces IZipClient An interface for the primary object used to access the Zip payments API."
  },
  "api/Yort.Zip.InStore.ZipErrorResponse.html": {
    "href": "api/Yort.Zip.InStore.ZipErrorResponse.html",
    "title": "Class ZipErrorResponse | Yort.Zip.InStore",
    "keywords": "Class ZipErrorResponse Used to hold error messages and validation errors returned by the Zip API. Inheritance Object ZipErrorResponse Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : Yort.Zip.InStore Assembly : Yort.Zip.InStore.dll Syntax [Serializable] public class ZipErrorResponse Constructors | Improve this Doc View Source ZipErrorResponse() Default constructor. Declaration public ZipErrorResponse() Properties | Improve this Doc View Source Detail Sets or returns an error message specific to this instance of the error (as opposed to Title ). Declaration public string Detail { get; set; } Property Value Type Description String | Improve this Doc View Source ErrorCode Sets or returns a string containing an 'error code' that can be used to programmatically take action on a specific error. Declaration public string ErrorCode { get; set; } Property Value Type Description String | Improve this Doc View Source IsValid Returns a boolean indicatin whether or not the request was valid. Declaration public bool IsValid { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Message Sets or returns the top level error message associated with the response. Declaration public string Message { get; set; } Property Value Type Description String | Improve this Doc View Source ResponseCode The HTTP status code returned with the response that contained these errors. Declaration public int ResponseCode { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Title Sets or returns a generic description of the error message. Declaration public string Title { get; set; } Property Value Type Description String | Improve this Doc View Source TraceId Sets or returns a unique value that can be reported to Zip to assist with locating log entries relating to this request. Declaration public string TraceId { get; set; } Property Value Type Description String | Improve this Doc View Source Type A string containing a uri that defines the specific type of error that occurred. Declaration public string Type { get; set; } Property Value Type Description String | Improve this Doc View Source ValidationErrors An array of errors, keyed by the name of the property that as an error and with the value being an array of related error messages. Declaration [JsonPropertyName(\"errors\")] public IEnumerable<ZipValidationError> ValidationErrors { get; set; } Property Value Type Description IEnumerable < ZipValidationError >"
  }
}